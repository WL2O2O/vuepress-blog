import{_ as t,X as p,Y as c,$ as n,a0 as s,a1 as o,Z as a,C as l}from"./framework-b0c8e9b4.js";const i={},u=n("p",null,[n("code",null,"JZ6 从尾到头打印链表")],-1),d=n("p",null,"简单 通过率：29.17% 时间限制：1秒 空间限制：64M",-1),r={href:"https://www.nowcoder.com/exam/oj/ta?page=1&tpId=13&type=13?tag=580",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="描述" tabindex="-1"><a class="header-anchor" href="#描述" aria-hidden="true">#</a> 描述</h2><p>输入一个链表的头节点，按链表从尾到头的顺序返回每个节点的值（用数组返回）。</p><p>如输入{1,2,3}的链表如下图:</p><figure><img src="https://uploadfiles.nowcoder.com/images/20210717/557336_1626506480516/103D87B58E565E87DEFA9DD0B822C55F" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>返回一个数组为[3,2,1]</p><p>0 &lt;= 链表长度 &lt;= 10000</p><h2 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1" aria-hidden="true">#</a> 示例1</h2><p>输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{1,2,3}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[3,2,1]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2" aria-hidden="true">#</a> 示例2</h2><p>输入：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{67,0,24,58}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>返回值：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[58,24,0,67]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,16),v=a(`<p><code>技巧：</code></p><p>​ 出入栈或者递归</p><p>​ 递归方法 + ArryList的头结点添加元素实现链表逆序</p><p><code>思路：</code></p><p>​ 涉及到递归的思想：递归是一个过程或函数在其定义或说明中有直接或间接调用自身的一种方法，它通常把一个大型复杂问题层层转化为一个与原问题相似的小问题来求解。因此，所谓递归就是将一个复杂的问题细化为一个个子问题，这就是递归！</p><p>​ 下面说说这个题目：</p><p>​ 我们都知道链表无法进行逆序访问，那肯定无法直接遍历链表得到从头到尾的逆序结果。但是我们都知道递归是<strong>到达底层</strong>之后才会<strong>往上层回溯</strong>，因此我们可以考虑递归遍历链表：</p><p>​ step1:从表头开始往后递归进入每一个节点。</p><p>​ step2:每次返回添加一个值到新的数组中，直到遇到尾节点（head.next == null）</p><p>​ 官方题解思路：</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307211019432.png" alt="image-20230721101906413" tabindex="0" loading="lazy"><figcaption>image-20230721101906413</figcaption></figure><p><code>code：</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
*    public class ListNode <span class="token punctuation">{</span>
*        int val;
*        ListNode next = null;
*
*        ListNode(int val) <span class="token punctuation">{</span>
*            this.val = val;
*        <span class="token punctuation">}</span>
*    <span class="token punctuation">}</span>
*
*/</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>listNode <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            s<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>listNode<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            listNode <span class="token operator">=</span> listNode<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token comment">//递归函数</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res<span class="token punctuation">)</span><span class="token punctuation">{</span> 
        <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//先往链表深处遍历</span>
            <span class="token function">recursion</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> 
            <span class="token comment">//再填充到数组就是逆序</span>
            res<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">printListFromTailToHead</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> listNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//递归函数解决</span>
        <span class="token function">recursion</span><span class="token punctuation">(</span>listNode<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>结束语：</code></p><p>​ 本题考查的就是链表的逆向输出，要想逆向输出，</p><ol><li>可以遍历链表然后存储到数组中，再利用数组的reverse()方法，直接反序；</li><li>官方题解中的链表递归，其实这个考察的就是递归的思想，递归是<strong>到达底层</strong>之后才会<strong>往上层回溯</strong>（先递进，再回归！可以这么理解）</li><li>既然涉及到链表的反序输出，那么为什么不利用栈呢？先入后出==&gt;逆向输出。</li></ol><p>​</p><p>好久没写算法题，太生疏了！！！每日一题，没有退路，继续加油！</p>`,19);function m(g,b){const e=l("ExternalLinkIcon");return p(),c("div",null,[n("blockquote",null,[u,d,n("p",null,[s("知识点"),n("a",r,[s("链表"),o(e)])]),k]),v])}const y=t(i,[["render",m],["__file","JZ06 从尾到头打印链表.html.vue"]]);export{y as default};
