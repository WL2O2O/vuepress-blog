import{_ as p,X as o,Y as i,$ as n,a0 as s,a1 as t,Z as e,C as c}from"./framework-b0c8e9b4.js";const l={},u=e('<h1 id="api开放平台" tabindex="-1"><a class="header-anchor" href="#api开放平台" aria-hidden="true">#</a> API开放平台</h1><blockquote><p>写在最前面：</p><p>​ 学到的知识与收到的建议：</p><ol><li>把自己所有的数据库建表语句总结到一起，后续有用；</li><li>记录Bug文档</li><li>多记录一些需求的解决方案、提高自己的架构能力</li></ol></blockquote><h2 id="项目介绍" tabindex="-1"><a class="header-anchor" href="#项目介绍" aria-hidden="true">#</a> 项目介绍</h2><blockquote><p>前端开发的时候有有时会需要后端的接口，如果此时有一个API接口可以使用，那么就无需后端借口了</p></blockquote><p>一个提供API接口调用的平台，用户可以注册与登录，开通接口的调用权限，用户可以使用接口，每次调用会进行次数统计。管理院可以发布接口、下线接口、接入接口，以及可视化接口的调用情况。</p><p>一个API接口平台：</p><ol><li>防止攻击</li><li>使用限制</li><li>统计调用次数</li><li>计费</li><li>流量保护</li><li>API接入</li></ol><h2 id="预计完成时间" tabindex="-1"><a class="header-anchor" href="#预计完成时间" aria-hidden="true">#</a> 预计完成时间</h2><p>5-6周</p><h2 id="业务流程" tabindex="-1"><a class="header-anchor" href="#业务流程" aria-hidden="true">#</a> 业务流程</h2><p>前台、SDK、API网关、模拟接口、后台 共五个子模块</p><p><strong>难点</strong>：思想</p><h2 id="技术选型" tabindex="-1"><a class="header-anchor" href="#技术选型" aria-hidden="true">#</a> 技术选型</h2><ul><li>前端 <ul><li>Ant Design Pro</li><li>React</li><li>Ant Design Pro Components</li><li>Umi</li><li>Umi Request（Axios的封装）--请求库（前后端联调）</li></ul></li><li>后端 <ul><li>Spring Boot</li><li>Spring Boot Stater（SDK开发）--可以发布到maven仓库----<strong>简历亮点</strong></li><li>？？？？？？（网关、限流、日志实现）</li></ul></li></ul><h2 id="项目计划" tabindex="-1"><a class="header-anchor" href="#项目计划" aria-hidden="true">#</a> 项目计划</h2><h3 id="day01-项目初始化" tabindex="-1"><a class="header-anchor" href="#day01-项目初始化" aria-hidden="true">#</a> Day01--项目初始化</h3><p>项目介绍、设计、技术选型</p><p>基础项目的搭建</p><p>接口管理</p><p>用户查看接口的权限</p><h3 id="day02-接口调用" tabindex="-1"><a class="header-anchor" href="#day02-接口调用" aria-hidden="true">#</a> Day02--接口调用</h3><ol><li>继续开发接口管理前端页面 15min</li><li>开发模拟API接口 5min</li><li>开发调用接口的代码 10-20min</li><li>保证调用的安全性（API签名认证） 15min</li><li>客户端SDK的开发 15min</li><li>管理员接口的发布与调用 15min</li><li>接口文档的展示、接口在线调用 15min</li></ol><h3 id="day03-接口计费与保护" tabindex="-1"><a class="header-anchor" href="#day03-接口计费与保护" aria-hidden="true">#</a> Day03--接口计费与保护</h3><p>统计用户调用次数</p><p>限流</p><p>计费</p><p>日志</p><p>开通</p><h3 id="day04-管理员统计分析" tabindex="-1"><a class="header-anchor" href="#day04-管理员统计分析" aria-hidden="true">#</a> Day04--管理员统计分析</h3><p>提供可视化平台，展示所有接口的调用情况，便于管理价格</p><p>接口预警</p><h2 id="day01-需求分析" tabindex="-1"><a class="header-anchor" href="#day01-需求分析" aria-hidden="true">#</a> Day01 需求分析</h2><ol><li><p>管理员可以对接口信息进行增删改查</p></li><li><p>用户可以访问前台，查看接口信息</p></li></ol><h3 id="今日计划" tabindex="-1"><a class="header-anchor" href="#今日计划" aria-hidden="true">#</a> 今日计划</h3><ol><li>项目脚手架搭建（初始化项目）10分钟前端、5-10分钟后端</li><li>管理员可以对接口信息进行增删改查</li><li>用户可以访问前台，查看接口的信息</li></ol><h3 id="项目初始化-前后端" tabindex="-1"><a class="header-anchor" href="#项目初始化-前后端" aria-hidden="true">#</a> 项目初始化（前后端）</h3><ul><li><h3 id="前端" tabindex="-1"><a class="header-anchor" href="#前端" aria-hidden="true">#</a> 前端</h3></li></ul><ol><li><p>使用Ant Design Pro提供的<code>pro-cli</code>来快速的初始化脚手架。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看node和npm版本</span>\n建议16和8\n<span class="token comment"># 使用 npm</span>\n<span class="token function">npm</span> i @ant-design/pro-cli <span class="token parameter variable">-g</span>\npro create myapi-frontend\n<span class="token comment"># 下载项目所需要的依赖</span>\n<span class="token function">yarn</span>\n此时可能会遇到node版本要求的问题，因为版本更新迭代的原因，我当时要求的是使用16.14.0的node版本，\n如果感觉切换node版本麻烦的话，这里推荐使用nvm（node的版本管理工具），使用方法自行百度\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>项目瘦身</p><p>遇到了一个大坑，星球的球友们也都遇到了，下面是球友的解决方法，亲测有效。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 关闭ESLint中与Prettier重复的规则，确保代码格式化的一致性</span>\n<span class="token function">yarn</span> <span class="token function">add</span> eslint-config-prettier <span class="token parameter variable">--dev</span>\n<span class="token comment"># 用于检查和修复JavaScript代码中的常见问题</span>\n<span class="token function">yarn</span> <span class="token function">add</span> eslint-plugin-unicorn <span class="token parameter variable">--dev</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="项目去除国际化存在问题的解决方法" tabindex="-1"><a class="header-anchor" href="#项目去除国际化存在问题的解决方法" aria-hidden="true">#</a> 项目去除国际化存在问题的解决方法</h3><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307010940465.png" alt="image-20230630231124235" tabindex="0" loading="lazy"><figcaption>image-20230630231124235</figcaption></figure><p>​ jest脚本命令中有<code>jest</code>不知道是否需要删掉，鱼皮的文件中没有出现，可能是跟某些版本有关，奇奇妙妙，记录一下</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307010940466.png" alt="image-20230630233743871" tabindex="0" loading="lazy"><figcaption>image-20230630233743871</figcaption></figure><ul><li><h3 id="后端" tabindex="-1"><a class="header-anchor" href="#后端" aria-hidden="true">#</a> 后端</h3></li></ul><ol start="3"><li>后端项目初始化</li></ol><p>​ 直接使用鱼总提供的万能模板<code>springboot-init</code>,改成项目的名字，然后全局搜索关键字进行替换</p><p>​ 连接数据库</p><p>​ 测试运行</p><ol start="4"><li>数据库库表设计</li></ol><p>​ <strong>接口信息表</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment"># 数据库初始化</span>\n<span class="token comment"># @author &lt;a href=&quot;https://github.com/liyupi&quot;&gt;程序员鱼皮&lt;/a&gt;</span>\n<span class="token comment"># @from &lt;a href=&quot;https://yupi.icu&quot;&gt;编程导航知识星球&lt;/a&gt;</span>\n<span class="token comment">-- 创建库</span>\n<span class="token keyword">create</span> <span class="token keyword">database</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> myapi<span class="token punctuation">;</span>\n\n<span class="token comment">-- 切换库</span>\n<span class="token keyword">use</span> myapi<span class="token punctuation">;</span>\n\n<span class="token comment">-- 用户表</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token keyword">user</span>\n<span class="token punctuation">(</span>\n    id           <span class="token keyword">bigint</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;id&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>\n    userName     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>                           <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户昵称&#39;</span><span class="token punctuation">,</span>\n    userAccount  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>                           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;账号&#39;</span><span class="token punctuation">,</span>\n    userAvatar   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>                          <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户头像&#39;</span><span class="token punctuation">,</span>\n    gender       <span class="token keyword">tinyint</span>                                <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;性别&#39;</span><span class="token punctuation">,</span>\n    userRole     <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;user&#39;</span>            <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户角色：user / admin&#39;</span><span class="token punctuation">,</span>\n    userPassword <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>                           <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;密码&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>accessKey<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;accessKey&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>secretKey<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;secretKey&#39;</span><span class="token punctuation">,</span>\n    createTime   <span class="token keyword">datetime</span>     <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n    updateTime   <span class="token keyword">datetime</span>     <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n    isDelete     <span class="token keyword">tinyint</span>      <span class="token keyword">default</span> <span class="token number">0</span>                 <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否删除&#39;</span><span class="token punctuation">,</span>\n    <span class="token keyword">constraint</span> uni_userAccount\n        <span class="token keyword">unique</span> <span class="token punctuation">(</span>userAccount<span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 接口信息</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span>\n<span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;名称&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;描述&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;接口地址&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;请求头&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;响应头&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;接口状态（0-关闭，1-开启）&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;请求类型&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建人&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>createTime<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>updateTime<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>isDelete<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否删除(0-未删, 1-已删)&#39;</span>\n<span class="token punctuation">)</span> <span class="token keyword">comment</span>  <span class="token string">&#39;接口信息&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 用户调用接口关系表</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token keyword">exists</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_interface_info<span class="token punctuation">`</span></span>\n<span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">auto_increment</span> <span class="token keyword">comment</span> <span class="token string">&#39;主键&#39;</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;调用用户 id&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>interfaceInfoId<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;接口 id&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>totalNum<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;总调用次数&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>leftNum<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;剩余调用次数&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span> <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;0-正常，1-禁用&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>createTime<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>updateTime<span class="token punctuation">`</span></span> <span class="token keyword">datetime</span> <span class="token keyword">default</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">on</span> <span class="token keyword">update</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">comment</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>isDelete<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span> <span class="token keyword">default</span> <span class="token number">0</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">&#39;是否删除(0-未删, 1-已删)&#39;</span>\n<span class="token punctuation">)</span> <span class="token keyword">comment</span> <span class="token string">&#39;用户调用接口关系&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;许擎宇&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;薛聪健&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.cary-king.net&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;潘博涛&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;谭聪健&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;石炫明&#39;</span><span class="token punctuation">,</span> <span class="token number">9500534531</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;陆弘文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;白志强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.leslee-kuhn.net&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;潘懿轩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;马鸿涛&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;陈峻熙&#39;</span><span class="token punctuation">,</span> <span class="token number">3982575846</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;毛建辉&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;罗文&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.rosaria-kilback.io&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;冯子默&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;彭哲瀚&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;赵远航&#39;</span><span class="token punctuation">,</span> <span class="token number">121776355</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;彭雨泽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蔡煜祺&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.norris-bergstrom.biz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;董思源&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;田晓博&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;潘擎宇&#39;</span><span class="token punctuation">,</span> <span class="token number">740</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;傅志强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陈梓晨&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.jordan-reinger.com&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;金志强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;熊锦程&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;邓睿渊&#39;</span><span class="token punctuation">,</span> <span class="token number">35542559</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;吕黎昕&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;孔越彬&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.fe-okon.info&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;万伟宸&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;林昊然&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;孟荣轩&#39;</span><span class="token punctuation">,</span> <span class="token number">1445</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;夏雪松&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;许子骞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.lashawna-legros.co&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蔡昊然&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;胡鹏涛&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;钟立辉&#39;</span><span class="token punctuation">,</span> <span class="token number">34075514</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;严钰轩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;阎志泽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.kay-funk.biz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;莫皓轩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;郭黎昕&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;龚天宇&#39;</span><span class="token punctuation">,</span> <span class="token number">70956</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;萧嘉懿&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;曹熠彤&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.margarette-lindgren.biz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;田泽洋&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;邓睿渊&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;梁志强&#39;</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;杜驰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;冯思源&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.vashti-auer.org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黎健柏&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;武博文&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;李伟宸&#39;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;史金鑫&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;蔡鹏涛&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.diann-keebler.org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;徐烨霖&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;阎建辉&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;李烨伟&#39;</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;林炫明&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;贾旭尧&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.dotty-kuvalis.io&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;梁雨泽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;龙伟泽&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;许智渊&#39;</span><span class="token punctuation">,</span> <span class="token number">79998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;何钰轩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;赖智宸&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.andy-adams.net&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;崔思淼&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;白鸿煊&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;邵振家&#39;</span><span class="token punctuation">,</span> <span class="token number">7167482751</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;魏志强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;于立诚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.ione-aufderhar.biz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;朱懿轩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;万智渊&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;唐昊强&#39;</span><span class="token punctuation">,</span> <span class="token number">741098</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;严君浩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;金胤祥&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.duane-boyle.org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;雷昊焱&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;侯思聪&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;郝思&#39;</span><span class="token punctuation">,</span> <span class="token number">580514</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;姚皓轩&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;金鹏&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.lyda-klein.biz&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;杜昊强&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;邵志泽&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;冯鸿涛&#39;</span><span class="token punctuation">,</span> <span class="token number">6546</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;廖驰&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;沈泽洋&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.consuelo-sipes.info&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;彭昊然&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;邓耀杰&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;周彬&#39;</span><span class="token punctuation">,</span> <span class="token number">7761037</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;赖智渊&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;邓志泽&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.emerson-mann.co&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;熊明哲&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;贺哲瀚&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;田鹏&#39;</span><span class="token punctuation">,</span> <span class="token number">381422</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;许涛&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;陆致远&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.vella-ankunding.name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;贾哲瀚&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;莫昊焱&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;袁越彬&#39;</span><span class="token punctuation">,</span> <span class="token number">4218096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> myapi<span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>interface_info<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>description<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>url<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>requestHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>responseHeader<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>status<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>method<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;吕峻熙&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;沈鹏飞&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;www.shari-reichel.org&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;郭鸿煊&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;覃烨霖&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;熊黎昕&#39;</span><span class="token punctuation">,</span> <span class="token number">493</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>留一个小bug，数据库建表语句直接套用的最终建表语句，user表中涉及到两个关于key的字段，手动改成了可以为空，若有问题，后续再做出更改</p></blockquote><blockquote><p>利用<code>MyBatisX</code>插件生成接口管理的增删改查代码</p></blockquote><p>将生成的代码逻辑复制到项目的dao、service、mapper包里，</p><p>然后还剩一个controller层，直接复制一份模板中的controller层的代码，进行复用</p><p>注意此时模糊查询使用的字段不是content，而是description，进行相应的更改。</p><p>此时，增删改查操作已完成，就这么简单</p><p>跑通后端</p><ul><li><h3 id="前端-1" tabindex="-1"><a class="header-anchor" href="#前端-1" aria-hidden="true">#</a> 前端</h3></li></ul><p>使用oneapi插件自动生成（openapi规范）</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307012353984.png" alt="image-20230701235258820" tabindex="0" loading="lazy"><figcaption>image-20230701235258820</figcaption></figure><blockquote><p>先前，我们登陆时是采用的start假数据进行登录，此时使用dev，登陆页面是存在问题的，因为脚手架自动生成的页面会强制要求登录，此时的登录接口与我们oneapi自动生成的接口对应不上，需要手动进行更改User》》Login》》index.tsx</p></blockquote><p>因为没有开发注册页面，可以从注册中心项目中复制一个过来</p><p>为了便捷的进行开发，先从swagger注册一个账号，然后登录发现没有进行跳转，通过分析得出，是因为前端没有记录用户的登录状态，所以要进一步进行完善，在typings.d.ts中进行定义全局登录态</p><p>改造页面，将前端展示的表格，用来展示自己的数据</p><h2 id="day02-接口调用开发-前端" tabindex="-1"><a class="header-anchor" href="#day02-接口调用开发-前端" aria-hidden="true">#</a> Day02 接口调用开发（前端）</h2><blockquote><p>首先发现一个问题，使用后端swagger进行user密码更改的时候，密码没有进行加密，会导致前端进行校验的时候返回用户名或者密码不正确的信息</p></blockquote><ul><li><h3 id="优化前端展示页面-改路由-先不删" tabindex="-1"><a class="header-anchor" href="#优化前端展示页面-改路由-先不删" aria-hidden="true">#</a> 优化前端展示页面（改路由，先不删）</h3><ul><li>保持前后端组件名一致</li><li>优化页面代码</li><li>首页没有页面，后续进行开发一个非管理员用户可以看到的页面</li><li>调整导航栏的位置，可以先使用antDesignPro框架提供的切换导航布局小设置</li></ul></li><li><h3 id="新建模态框的编写真的很搞心态-最后的原因竟然是因为一个小的错误-静下心来-血泪教训-做完项目过一遍react" tabindex="-1"><a class="header-anchor" href="#新建模态框的编写真的很搞心态-最后的原因竟然是因为一个小的错误-静下心来-血泪教训-做完项目过一遍react" aria-hidden="true">#</a> 新建模态框的编写真的很搞心态，最后的原因竟然是因为一个小的错误（静下心来）（血泪教训，做完项目过一遍react）</h3></li><li><h3 id="完善修改框" tabindex="-1"><a class="header-anchor" href="#完善修改框" aria-hidden="true">#</a> 完善修改框</h3><ul><li><p>此处设计到React的核心知识点，也是重中之重（useEffect、useRef）</p></li><li><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> formRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>ProFormInstance<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span>formRef<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    formRef<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token function">setFieldsValue</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> \n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>values<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n<span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Modal</span></span> <span class="token attr-name">visible</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>visible<span class="token punctuation">}</span></span> <span class="token attr-name">footer</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token punctuation">}</span></span> <span class="token attr-name">onCancel</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> onCancel<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ProTable</span></span>\n        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">columns</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>columns<span class="token punctuation">}</span></span>\n        <span class="token comment">// 因为这里使用的form组件，只会初始化一次，所以会造成点击修改按钮进行修改的话，数据是不会变的</span>\n        <span class="token comment">// form={{</span>\n        <span class="token comment">//   initialValues: values</span>\n        <span class="token comment">// }}</span>\n        \n        <span class="token comment">// 所以此处用到了监听</span>\n        <span class="token attr-name">formRef</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>formRef<span class="token punctuation">}</span></span>\n        \n        <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n          onSubmit<span class="token operator">?.</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/&gt;</span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Modal</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><blockquote><p>此处有Bug，后端报空指针</p></blockquote></li></ul></li><li><h3 id="完善删除框" tabindex="-1"><a class="header-anchor" href="#完善删除框" aria-hidden="true">#</a> 完善删除框</h3><ul><li><p>仿照以上步骤完成</p></li><li><blockquote><p>此时发现进行相关操作之后数据不会自动更新，所以我们引入actionRef，它可以拿到proTable的控制权，使用actionRef.current?.reload()</p></blockquote></li></ul></li></ul><h3 id="模拟接口项目-smartapi-interface-后端" tabindex="-1"><a class="header-anchor" href="#模拟接口项目-smartapi-interface-后端" aria-hidden="true">#</a> 模拟接口项目（smartapi-interface）（后端）</h3><p>提供三个模拟接口</p><ol><li>GET接口</li><li>POST接口（url传参）</li><li>POST接口（Restful）</li></ol><h3 id="开始开发模拟接口项目部分" tabindex="-1"><a class="header-anchor" href="#开始开发模拟接口项目部分" aria-hidden="true">#</a> 开始开发模拟接口项目部分</h3><p>采用创建几个controller控制层小接口，前端传参进行调用，但是这样不符合逻辑，所以我们要通过后端来进行传参！</p><h3 id="开发调用接口" tabindex="-1"><a class="header-anchor" href="#开发调用接口" aria-hidden="true">#</a> 开发调用接口</h3><p>几种HTTP调用方式</p><pre><code>1. HttpClient\n1. RestTemplete\n1. 工具（OKHttp、HuTool）\n</code></pre>',75),r={href:"https://hutool.cn/docs/#/",target:"_blank",rel:"noopener noreferrer"},d=e(`<p>参考文档是一个好东西，利用好</p><p>那么现在已经开发好调用接口了，但是用户调用你的接口，或者黑客黑你的接口，所以需要对调用者进行一个调用限制，那么如何加以限制？</p><p>这时可以联想一下我们平时调用第三方接口时，都会有一些key</p><h3 id="api-签名认证-客户端与服务端有点迷惑-后续捋顺" tabindex="-1"><a class="header-anchor" href="#api-签名认证-客户端与服务端有点迷惑-后续捋顺" aria-hidden="true">#</a> API 签名认证（客户端与服务端有点迷惑，后续捋顺）</h3><p><strong>本质：</strong></p><ol><li><p>签发签名</p><ol start="2"><li>使用签名(校验签名)</li></ol></li></ol><p><strong>为什么需要？</strong></p><ol><li>保证安全性，不能随便一个人就可以调用</li></ol><p><strong>怎么实现？（复杂、无序、无规律）</strong></p><p>通过http request header头传递参数。</p><p>参数1：assesKey：调用的标识（一串无规则字符串） User A、B</p><p>参数2：secretKey：相当于密码</p><p>也就是用户名和密钥，区别就是ak、sk是无状态的</p><p>在服务端数据库表中新增以上两个字段，用户客户端进行校验。</p><p>但是这样的方法时容易被拦截的，不能把密钥直接在服务器之间进行传递，要进行加密。所以要对密码进一步进行加密。</p><p>参数3：用户请求参数（更严格）</p><p>参数4：sign</p><p>加密方式：对称机密、非对称加密、不可解密加密（MD5）</p><p>用户参数 + 密钥 ==》 <strong>签名生成算法</strong> ==》不可解密的值</p><p>wl + abcdefgh ==》afdasfafszv（通过签名算法加密）</p><p>那么如何知道这个签名是否正确？</p><p><strong>服务端会通过用一摸一样的参数和算法去生成签名，只要和用户才能属的签名一致，则正确!</strong></p><p><strong>怎么防重放？</strong></p><p>参数5：加nonce随机数，保证只能用一次，但是服务端也要保存随机数</p><p>参数6：timestamp时间戳（加上时间戳可以保证随机数可以清除）</p><p><strong>API签名认证是一个很灵活的设计，具体要有哪些参数、参数名一定要根据实际场景来（比如userId、appId、version、固定值等）</strong></p><p>思考：难道开发者每次调用接口都需要自己来写签名算法吗？</p><h3 id="开发一个简单易用的sdk" tabindex="-1"><a class="header-anchor" href="#开发一个简单易用的sdk" aria-hidden="true">#</a> 开发一个简单易用的SDK</h3><p>理想情况：开发者只需要关心调用哪些接口、传递哪些参数，就跟调用自己的代码一样简单。</p><p>开发stater的好处：</p><ol><li>开发者引入之后，可以直接在application.yml中写配置，自动创建客户端。</li></ol><h3 id="创建sdk项目-开发starter-简历亮点" tabindex="-1"><a class="header-anchor" href="#创建sdk项目-开发starter-简历亮点" aria-hidden="true">#</a> 创建SDK项目（开发starter）（简历亮点）</h3><p>引入依赖：</p><ol><li>lombook</li><li>Spring Configuration Processor（自动生成配置文件写代码的提示）</li></ol><p>改造pom依赖，一定要删掉build标签内的代码，因为我们在进行构建依赖包，不是要直接运行的jar的项目</p><p>尝试把打好的包发布到maven中</p><h2 id="day03-接口保护与优化" tabindex="-1"><a class="header-anchor" href="#day03-接口保护与优化" aria-hidden="true">#</a> Day03 接口保护与优化</h2><blockquote><p>此时，我们发现鱼总的后端项目模块中已经包含前面单独创建好的SDK和interface模拟接口项目了，那么我们如何把这两个添加到后端的项目中呢？</p><p>方案一：</p><p>​ 受尚医通项目的影响，我想应该可以通过增加子模块的方法拉进行添加，但是添加之后好像是不太行，跟鱼总的不一样，这种方法应该是可以使多个项目在同一个窗口中打开（解决了之前我的疑虑）</p><p>方案二：</p><p>​ 我们看到鱼总的后端项目中，另外两个项目（SDK和interface）是两个目录的标识，于是我就直接复制粘贴到后端项目的文件夹中了，然后Java源文件会变成红J，可以通过右键rsc下main下的Java文件夹，然后mark Directory as--》Sources Root，将Java文件夹标记为源码根目录，如图所示：</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307092023528.png" alt="image-20230708205543307" tabindex="0" loading="lazy"><figcaption>image-20230708205543307</figcaption></figure><p>然后我们发现maven的pom依赖文件的图标也不对，也通过桐言的方法，右键--》add maven project标记为maven项目，大功告成！</p></blockquote><p>1.开发接口发布/下线的功能（管理员）</p><p>2.前端浏览接口，查看 接口文档，申请签名（注册）</p><p>3.在线测试（用户）</p><p>4.统一用户调用接口次数</p><p>5.优化系统-API网关</p><h3 id="开发接口发布-下线的功能-仅管理员" tabindex="-1"><a class="header-anchor" href="#开发接口发布-下线的功能-仅管理员" aria-hidden="true">#</a> 开发接口发布/下线的功能（仅管理员）</h3><blockquote><p>此处又涉及到了一个待学知识点：</p><p>Spring的AOP切面应用</p><p>可以用来通过注解的方式进行权限管理。</p></blockquote><h3 id="后端接口" tabindex="-1"><a class="header-anchor" href="#后端接口" aria-hidden="true">#</a> 后端接口：</h3><p><strong>发布接口</strong>（仅管理员）</p><p>1.校验该接口是否存在</p><p>2.判断接口是否可以被调用</p><p>​ 利用开发好的SDK，通过调用接口看是否能够进行调用的通</p><p>​ 第一步：启动smartapi-interface项目</p><p>​ 第二步：在smartapi-backend中引入SDK的依赖</p><p>​ 第三步：在application.yml中写入ak、sk</p><p>​ 第四步：在接口中引入客户端的实例</p><p>​ @Resource</p><p>​ private SmartApiClient smartapiclient</p><blockquote><p>TODO:</p><blockquote><blockquote><ol><li>判断接口是否可以调用时，由固定方法名改为可以根据测试地址进行调用</li><li>用户测试接口判断接口是否可以调用时，由固定方法名改为可以根据测试地址进行调用</li></ol></blockquote></blockquote></blockquote><p>3.修改数据库接口字段为1</p><p><strong>下线接口</strong>（仅管理员）</p><p>1.校验该接口是否存在</p><p>2.修改数据库接口字段为 0</p><p>按钮已添加并完善。测试中出现一个经典问题，如图所示：</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307100008989.png" alt="image-20230710000821503" tabindex="0" loading="lazy"><figcaption>image-20230710000821503</figcaption></figure><blockquote><p>待办事件：</p><p>流程：</p><p><strong>前端</strong>添加上线、下线按钮、√、增加用户浏览页面、查看接口文档、申请签名</p><p><strong>后端</strong>申请签名（更改完善数据库写生成签名的算法）</p><p><strong>前端</strong></p><p>新增在线调用的按钮</p><p><strong>后端</strong></p><p>开发在线调用的接口</p></blockquote><h3 id="前端浏览接口" tabindex="-1"><a class="header-anchor" href="#前端浏览接口" aria-hidden="true">#</a> 前端浏览接口</h3><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>import { PageContainer } from &#39;@ant-design/pro-components&#39;;
import React, {useEffect, useState} from &#39;react&#39;;
import {List, message} from &quot;antd&quot;;
import {
  listInterfaceInfoByPageUsingGET
} from &quot;@/services/smartapi-backend/interfaceInfoController&quot;;


/**
 * 主页
 * @constructor
 */
const Index: React.FC = () =&gt; {

  const [loading, setLoading] = useState(false);
  const [list, setList] = useState&lt;API.InterfaceInfo[]&gt;([]);
  const [total ,setTotal] = useState&lt;number&gt;(0);

  const loadData = async (current=1 , pageSize = 8 ) =&gt;{
    setLoading(true);
    try {
      const res = await listInterfaceInfoByPageUsingGET({
        current,pageSize
      });
      setList(res?.data?.records ?? []);
      setTotal(res?.data?.total ?? 0);

    } catch (error: any) {

      message.error(&#39;请求失败,&#39;+error.message);
      return false;
    }
    setLoading(false);
  }
  useEffect(() =&gt; {
    loadData();
  },[])


  return (
    &lt;PageContainer title=&quot;在线接口开放平台&quot;&gt;
      &lt;List
        className=&quot;my-list&quot;
        loading={loading}
        itemLayout=&quot;horizontal&quot;
        dataSource={list}
        renderItem={item =&gt; {

          const apiLink =\`/interface_info/\${item.id}\`;
          return(
            &lt;List.Item
              actions={[&lt;a key={item.id} href={apiLink}&gt;查看&lt;/a&gt;]}
            &gt;
              &lt;List.Item.Meta
                title={&lt;a href={apiLink}&gt;{item.name}&lt;/a&gt;}
                description={item.description}
              /&gt;
            &lt;/List.Item&gt;
          )
        }

        }
        pagination ={
          {
            // eslint-disable-next-line @typescript-eslint/no-shadow
            showTotal(total: number){
              return &#39;总数：&#39; +total;
            },
            pageSize: 8,
            total,
            onChange(page,pageSize){
              loadData(page,pageSize);
            }
          }
        }
      /&gt;
    &lt;/PageContainer&gt;
  );
};

export default Index;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看接口文档" tabindex="-1"><a class="header-anchor" href="#查看接口文档" aria-hidden="true">#</a> 查看接口文档</h3><div class="language-react line-numbers-mode" data-ext="react"><pre class="language-react"><code>import { PageContainer } from &#39;@ant-design/pro-components&#39;;
import React, {useEffect, useState} from &#39;react&#39;;
import {Card, Descriptions, message} from &quot;antd&quot;;
import {
  getInterfaceInfoByIdUsingGET,

} from &quot;@/services/smartapi-backend/interfaceInfoController&quot;;
import { useParams} from &quot;@@/exports&quot;;


/**
 * 主页
 * @constructor
 */
const Index: React.FC = () =&gt; {

  const [loading, setLoading] = useState(false);
  const [data, setData] = useState&lt;API.InterfaceInfo&gt;();
  const params  = useParams();

  const loadData = async () =&gt;{
    if (!params.id){
      message.error(&#39;参数不存在&#39;);
      return ;
    }
    setLoading(true);
    try {
      const res = await getInterfaceInfoByIdUsingGET({
        id: Number(params.id)
      });
      setData(res.data);

    } catch (error: any) {

      message.error(&#39;请求失败,&#39;+error.message);
      return false;
    }
    setLoading(false);
  }
  useEffect(() =&gt; {
    loadData();
  },[])

  return (
    &lt;PageContainer title=&quot;查看接口文档&quot;&gt;
      &lt;Card&gt;
        {
          data?(
            &lt;Descriptions title={data.name} column={1}&gt;
              &lt;Descriptions.Item label=&quot;描述&quot;&gt;{data.description}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;接口状态&quot;&gt;{data.status? &#39;正常&#39;: &#39;关闭&#39;}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;请求地址&quot;&gt;{data.url}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;请求方法&quot;&gt;{data.method}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;请求头&quot;&gt;{data.requestHeader}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;响应头&quot;&gt;{data.responseHeader}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;创建时间&quot;&gt;{data.createTime}&lt;/Descriptions.Item&gt;
              &lt;Descriptions.Item label=&quot;更新时间&quot;&gt;{data.updateTime}&lt;/Descriptions.Item&gt;
            &lt;/Descriptions&gt;
          ):(
            &lt;&gt;接口不存在&lt;/&gt;
          )}
      &lt;/Card&gt;
    &lt;/PageContainer&gt;
  );
};

export default Index;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="申请签名-注册" tabindex="-1"><a class="header-anchor" href="#申请签名-注册" aria-hidden="true">#</a> 申请签名（注册）</h3><p>通过数据库新增字段、更改用户注册的逻辑（使用DigestUtil加密算法生成ak、sk，然后加入数据库）</p><blockquote><p>留一个小作业:</p><p>新增一个小拓展功能：用户可以手动更改自己的ak、sk</p></blockquote><h3 id="新建真实数据-前端" tabindex="-1"><a class="header-anchor" href="#新建真实数据-前端" aria-hidden="true">#</a> 新建真实数据（前端）</h3><p><strong>新建这些真实的数据</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>getUsernameByPost,

获取用户名,

http://localhost:8123/name/user,

{”Content-Type“: ”application/json“},

{”Content-Type“: ”application/json“},

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>oh my god，此时发现遗忘了一个重要的请求参数字段，于是通过建表语句、IDEA客户端modify table，来增加这么一个字段。</p><p>修改相应的model实体包中的字段信息以及向mybatisplus.xml中添加这个字段。</p><p>重启项目---》前端重新使用openai插件生成接口</p><p>前端也需要完善修改组件的表单列名，新增一个requestParams</p><p>完成！</p><p><strong>完善接口信息的请求参数信息</strong></p><p><strong>在线调用</strong></p><p>前端界面的编写，通过ant design组件库利用现成的表单组件来完成在线按钮的添加与请求参数的基本表单。</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307100238354.png" alt="image-20230710023831281" tabindex="0" loading="lazy"><figcaption>image-20230710023831281</figcaption></figure><p>请求参数的类型（JSON类型）</p><blockquote><p>又一个小作业：</p><p>在线调用的扩展点：</p><p>先跑通整个流程，然后根据请求头和请求类型的不同设计不同的表单和界面，增强用户体验</p></blockquote><h3 id="后端调用流程" tabindex="-1"><a class="header-anchor" href="#后端调用流程" aria-hidden="true">#</a> 后端调用流程</h3><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307100242406.png" alt="image-20230710024253445" tabindex="0" loading="lazy"><figcaption>image-20230710024253445</figcaption></figure><p>按照标准的企业开发流程来说：</p><p>一定会选择第一种开发方式，不然后期的网关与计费就毫无作用，</p><p>第二种方式可以用来自己调用测试。</p><p>流程：</p><ol><li>前端将用户输入的请求参数与要进行测试的接口id发给平台后端</li><li>在调用前进行一些校验</li><li>平台后端去调用模拟接口</li></ol><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>/**
     * 测试调用
     *
     * @param interfaceInfoInvokeRequest
     * @param request
     * @return
     */
    @PostMapping(&quot;/invoke&quot;)
    public BaseResponse&lt;Object&gt; invokeInterfaceInfo(@RequestBody InterfaceInfoInvokeRequest interfaceInfoInvokeRequest,
                                                    HttpServletRequest request) {
        if (interfaceInfoInvokeRequest == null || interfaceInfoInvokeRequest.getId() &lt;= 0) {
            throw new BusinessException(ErrorCode.PARAMS_ERROR);
        }
        long id = interfaceInfoInvokeRequest.getId();
        String userRequestParams = interfaceInfoInvokeRequest.getUserRequestParams();
        // 判断是否存在
        InterfaceInfo oldInterfaceInfo = interfaceInfoService.getById(id);
        if (oldInterfaceInfo == null) {
            throw new BusinessException(ErrorCode.NOT_FOUND_ERROR);
        }
        if (oldInterfaceInfo.getStatus() == InterfaceInfoStatusEnum.OFFLINE.getValue()) {
            throw new BusinessException(ErrorCode.PARAMS_ERROR, &quot;接口已关闭&quot;);
        }
        User loginUser = userService.getLoginUser(request);
        String accessKey = loginUser.getAccessKey();
        String secretKey = loginUser.getSecretKey();
        MyClient tempClient = new MyClient(accessKey, secretKey);
        Gson gson = new Gson();
        com.wl.smartapiclientsdk.model.User user = gson.fromJson(userRequestParams, com.wl.smartapiclientsdk.model.User.class);
        String usernameByPost = tempClient.getUserNameByPost(user);
        return ResultUtils.success(usernameByPost);
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端调用逻辑已完成</p><p>现在继续完善前端的接口，将前端点击调用按钮后改为我们刚才通过后端实现的真实的功能。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const onFinish = (values: any) =&gt; {
    if (!params.id){
      message.error(&#39;接口不存在&#39;);
      return ;
    }
    try {
      invokeInterfaceInfoUsingPOST({
        id: params.id,
        ...values
      })
      message.success(&#39;请求成功&#39;);
      return true;
    } catch (error: any) {
      message.error(&#39;请求失败，&#39; + error.message);
    }
  };
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>逻辑打通之后还要进行回显数据：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// async 是设置同步的意思

 const onFinish = async (values: any) =&gt; {
    if (!params.id){
      message.error(&#39;接口不存在&#39;);
      return ;
    }
    try {
// 等待

      const res = await invokeInterfaceInfoUsingPOST({
        id: params.id,
        ...values
      })
// 将res.data赋给setInvokeRes

      setInvokeRes(res.data);
      message.success(&#39;请求成功&#39;);
      return true;
    } catch (error: any) {
      message.error(&#39;请求失败，&#39; + error.message);
    }
  };
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在表单处新增一个卡片，用于接收invokeRes进行数据回显。</p><p>已完成，测试通过！</p><p>并且完善了一个缓冲显示的loading</p><p>TODO:</p><blockquote><blockquote><ol><li>判断接口是否可以调用时，由固定方法名改为可以根据测试地址进行调用</li><li>用户测试接口判断接口是否可以调用时，由固定方法名改为可以根据测试地址进行调用</li><li>此时任何人调用模拟接口都是可以的，因为我们的SDK是写死在配置文件中的，所以后续再进行完善，从数据库中进行校验！</li></ol></blockquote></blockquote><p>over！</p><p>下面我们的网关用Spring Cloud GateWay实现</p><h2 id="day04" tabindex="-1"><a class="header-anchor" href="#day04" aria-hidden="true">#</a> Day04</h2><ol><li><p>开发接口调用次数统计 20min</p></li><li><p>优化系统的架构---学习架构设计、接触应用场景==&gt;面对一个需求就会自然而然地提高开发效率。 60min</p><p>（怎么把一个项目的架构设计做的更加合理，涉及到API网关的知识）</p><ul><li>网关是什么？</li><li>网关的作用？</li><li>网关的应用场景以及实现？</li><li>结合业务去应用网关</li></ul></li></ol><h3 id="接口调用次数统计" tabindex="-1"><a class="header-anchor" href="#接口调用次数统计" aria-hidden="true">#</a> 接口调用次数统计</h3><p>需求：</p><pre><code>1. 用户每次调用接口成功，次数加1（或者设定一定的调用次数，每次减1）
1. 给用户分配或者用户自助申请接口调用次数
</code></pre><blockquote><p>业务流程：</p><ol><li>用户调用接口（之前已完成）</li><li>修改数据库，调用次数（加1或者减1）</li></ol></blockquote><p>设计库表：</p><blockquote><p>哪个用户？哪个接口？</p><p>用户 =&gt; 接口（多对多）</p></blockquote><p>用户接口关系表：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>-- 用户调用接口关系表
create table if not exists smartapi.\`user_interface_info\`
(
    \`id\` bigint not null auto_increment comment &#39;主键&#39; primary key,
    \`userId\` bigint not null comment &#39;调用用户 id&#39;,
    \`interfaceInfoId\` bigint not null comment &#39;接口 id&#39;,
    \`totalNum\` int default 0 not null comment &#39;总调用次数&#39;,
    \`leftNum\` int default 0 not null comment &#39;剩余调用次数&#39;,
    \`status\` int default 0 not null comment &#39;0-正常，1-禁用&#39;,
    \`createTime\` datetime default CURRENT_TIMESTAMP not null comment &#39;创建时间&#39;,
    \`updateTime\` datetime default CURRENT_TIMESTAMP not null on update CURRENT_TIMESTAMP comment &#39;更新时间&#39;,
    \`isDelete\` tinyint default 0 not null comment &#39;是否删除(0-未删, 1-已删)&#39;
) comment &#39;用户调用接口关系&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="步骤" tabindex="-1"><a class="header-anchor" href="#步骤" aria-hidden="true">#</a> 步骤：</h3><ol><li><p>开发基本的增删改查（给管理员使用）</p><blockquote><p>直接使用Mybatis-X生成相关的实体类（注意在删除字段上米娜加上逻辑删除@TableLogic）、mapper、service实现类没然后移动到项目对应的包中。</p><p>复制写好的Controller，改那些增删改查！ 完成√</p></blockquote></li><li><p>开发用户调用接口次数加1（或者减1）</p><p>问：如果每个接口的方法，都写调用次数 + 1，是不是比较麻烦，如果在本项目中，将这个调用次数+ 1，封装成一个方法，也是可以的，但是<code>代码侵入性很强！</code></p><p>致命问题是：接口开发者需要自己进行调用！</p><p>解决方法：</p><ol><li>Spring中的AOP（推荐，是Spring的一个核心特性）</li><li>Servelet中的拦截器、过滤器（Fillter）</li><li>通用的方法（缺点：代码侵入性强，需要自己调用）</li><li>网关</li></ol></li></ol><p>简单说一下AOP切面的基本过程：</p><blockquote><p>先说一下AOP切面的作用：</p><p>就相当于在接口或者方法调用前或者调用之后帮你做一些事情，其底层的原理就是动态代理。</p><p>使用AOP切面的</p><p>优点：</p><p>独立于接口，在每个接口调用前后加 1</p><p>缺点：</p><p>只存在于单个项目中，如果每个团队都要写一个自己的切面</p><p>// TODO：下去看一下AOP的流程，熟悉一下</p></blockquote><p>我们在这个项目中使用网关来实现接口调用次数。</p><p>网关就当与在所有接口的入口前加了一层检票口，如图所示：</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307160152994.png" alt="image-20230716015231451" tabindex="0" loading="lazy"><figcaption>image-20230716015231451</figcaption></figure><p>因为网关实现的有调用次数的统计，所以开发者可以通关网关来查看，而用户调用接口时直接输入请求参数、请求地址即可。</p><h3 id="网关" tabindex="-1"><a class="header-anchor" href="#网关" aria-hidden="true">#</a> 网关：</h3><p>这里为什么写这么多理论呢？写代码不一定是最重要的，重要的是思想！逻辑思想明白之后，无非就是看文档、百度实现。</p><blockquote><p>什么是网关呢？就相当于车票检票口，统一去检票。</p><p>优点？统一去进行一些操作、处理一些问题。</p><p>作用？</p><ol><li><p>路由</p></li><li><p>负载均衡</p></li><li><p>统一鉴权</p></li><li><p>统一处理跨域</p></li><li><p>统一业务处理（缓存）</p></li><li><p>访问控制</p></li><li><p>发布控制（灰度发布，也就是慢慢控制接口的流量，不断开放给更多用户，然后达到升级接口的目的）</p></li><li><p>流量染色（给流量添加一些标识，比如新的请求头信息）</p></li><li><p>统一接口保护</p><ol><li><p>限制请求</p></li><li><p>信息脱敏（网关可以操作你的请求口，进而抹去敏感信息）</p></li><li><p>降级（熔断，保险起见，接口下线后，可以返回一些提示信息）</p></li><li><p>限流</p><p>（// TODO：学习令牌桶算法，学习露桶算法，学习一下）</p></li><li><p>RedislimitHandler</p></li><li><p>超时时间</p></li><li><p>重试（业务保护）</p></li></ol></li><li><p>统一日志</p></li><li><p>统一文档（将下游项目的文档统一聚合，展示到一个页面）</p></li></ol></blockquote><h3 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h3><p>起到转发的作用，比如有接口A和接口B,网关会记录这些信息，根据用户访问的地址和参数，转发请求到对应的接口（服务器/集群）</p><p>用户a调用接口A</p><p>/a=&gt;接口A /b=&gt;接口B</p>`,130),k={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories",target:"_blank",rel:"noopener noreferrer"},m=e('<h3 id="负载均衡" tabindex="-1"><a class="header-anchor" href="#负载均衡" aria-hidden="true">#</a> 负载均衡</h3><p>在路由的基础上可以转发到某一个服务器</p><p>/c =&gt; 服务A/ 集群A（随机转发到其中的某一个机器）</p><p>uri从固定地址改成b:xx</p><h3 id="统一鉴权" tabindex="-1"><a class="header-anchor" href="#统一鉴权" aria-hidden="true">#</a> 统一鉴权</h3><p>判断用户是否有权限进行操作，无论访问什么接口，我都统一去判断权限，不用重复写</p><h3 id="统一处理跨域" tabindex="-1"><a class="header-anchor" href="#统一处理跨域" aria-hidden="true">#</a> 统一处理跨域</h3><p>网关统一处理跨域，不用在每个项目单独处理</p>',8),v={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration",target:"_blank",rel:"noopener noreferrer"},b=e('<h3 id="统一业务处理" tabindex="-1"><a class="header-anchor" href="#统一业务处理" aria-hidden="true">#</a> 统一业务处理</h3><p>把每个项目中都要做的通用逻辑放到上层（网关），统一处理，比如本项目的次数统计</p><h3 id="访问控制" tabindex="-1"><a class="header-anchor" href="#访问控制" aria-hidden="true">#</a> 访问控制</h3><p>黑白名单，比如限制ddos ip</p><h3 id="发布控制" tabindex="-1"><a class="header-anchor" href="#发布控制" aria-hidden="true">#</a> 发布控制</h3><p>灰度发布，比如上线新接口，先给新接口分配 20%流量，老接口80% ,再慢慢调整比例</p>',6),g={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"流量染色",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#流量染色","aria-hidden":"true"},"#"),s(" 流量染色")],-1),h=n("p",null,"区分用户来源",-1),y={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters",target:"_blank",rel:"noopener noreferrer"},I=n("h3",{id:"接口保护",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#接口保护","aria-hidden":"true"},"#"),s(" 接口保护")],-1),_={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersiz-gatewayfilter-factory",target:"_blank",rel:"noopener noreferrer"},q={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers",target:"_blank",rel:"noopener noreferrer"},E={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory",target:"_blank",rel:"noopener noreferrer"},S={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration",target:"_blank",rel:"noopener noreferrer"},C={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory",target:"_blank",rel:"noopener noreferrer"},R=n("h3",{id:"统一日志",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#统一日志","aria-hidden":"true"},"#"),s(" 统一日志")],-1),T=n("p",null,"统一的请求，响应信息记录",-1),A=n("h3",{id:"统一文档",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#统一文档","aria-hidden":"true"},"#"),s(" 统一文档")],-1),B=n("p",null,"将下游项目的文档进行聚合，在一个页面统一查看",-1),P={href:"https://doc.xiaominfo.com/docs/middleware-sources/,aggregation-introduction",target:"_blank",rel:"noopener noreferrer"},D=n("h3",{id:"网关的分类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#网关的分类","aria-hidden":"true"},"#"),s(" 网关的分类")],-1),H=n("li",null,[n("p",null,"全局网关（接入层网关）：作用是负载均衡、请求日志，不和业务逻辑绑定")],-1),j=n("p",null,"业务网关（微服务网关：会有一些业务逻辑）：作用是根据不同的请求转发到不同的项目接口",-1),O={href:"https://blog.csdn.net/qq21040559/article/,details/,122961395",target:"_blank",rel:"noopener noreferrer"},M=e('<h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><ol><li><p>Nginx（推荐的全局型网关）</p></li><li><p>Kong网关（适合API网关）--收费！！</p></li><li><p><code>Spring Cloud Gateway</code>（取代了Zuul，因为架构设计并不太好，并发量也有限）</p><blockquote><p>优点：用到了NIO、多路复用、底层Netty、React模型；</p><p>最大的亮点：可以用Java代码写逻辑，其他网关都需要学习一些其他语言（Nginx需要学到一些Lua脚本）</p></blockquote></li></ol>',2),F={href:"https://zhuanlan.zhihu.com/p/500587132",target:"_blank",rel:"noopener noreferrer"},U=n("h3",{id:"spring-cloud-gateway用法",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-cloud-gateway用法","aria-hidden":"true"},"#"),s(" Spring Cloud Gateway用法")],-1),N=n("p",null,"官网是最好的老是去看官网",-1),L={href:"https://spring.io/projects/spring-cloud-gateway",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference//html/",target:"_blank",rel:"noopener noreferrer"},K=e('<h3 id="创建一个gateway项目" tabindex="-1"><a class="header-anchor" href="#创建一个gateway项目" aria-hidden="true">#</a> 创建一个Gateway项目</h3><p>小作业：完成官网的小demo（编程式demo）</p><h2 id="day05-把api网关应用到项目中" tabindex="-1"><a class="header-anchor" href="#day05-把api网关应用到项目中" aria-hidden="true">#</a> Day05 把API网关应用到项目中</h2><p>任务：</p><ol><li>完成统一的用户鉴权、统一的接口调用次数统计（API网关应用）</li><li>完善功能</li></ol><h3 id="将用到的特性" tabindex="-1"><a class="header-anchor" href="#将用到的特性" aria-hidden="true">#</a> 将用到的特性</h3><ol><li><p>路由（转发请求到模拟接口项目）</p></li><li><p><s>负载均衡（需要用到注册中心）</s></p></li><li><p>统一鉴权(accessKey，secretKey)</p></li><li><p>统一处理跨域</p></li><li><p>统一业务处理（每次请求接口后，接口调用次数+1）</p></li><li><p>访问控制（黑白名单）</p></li><li><p><s>发布控制</s></p></li><li><p>流量染色(记录请求是否为网关来的)</p></li><li><p><s>统一接口保护</s></p><ol><li>限制请求</li><li>信息脱敏</li><li>降级（熔断）</li><li>限流 学习令牌桶算法，学习露桶算法，学习一下RedislimitHandler</li><li>超时时间</li><li>重试（业务保护）</li></ol></li><li><p>统一日志(记录每次的请求和响应)</p></li><li><p><s>统一文档</s></p></li></ol><h3 id="业务逻辑" tabindex="-1"><a class="header-anchor" href="#业务逻辑" aria-hidden="true">#</a> 业务逻辑</h3><blockquote><p>为什么会用到API网关？</p><p>结合架构图来说，简单来说也就是加一个检票口，同时也可以添加流量染色、链路追踪的功能、灰度发布等等。。。</p></blockquote><ol><li>用户发送请求到API网关（请求转发）</li><li><em>请求日志</em></li><li><em>黑白名单</em></li><li>用户鉴权（如何？判断ak、sk）</li><li>请求的模拟接口是否存在？</li><li>请求转发，调用模拟接口</li><li>响应日志</li><li>调用成功，接口调用次数 + 1</li><li>调用失败，返回规范错误码</li></ol><h3 id="实现-1" tabindex="-1"><a class="header-anchor" href="#实现-1" aria-hidden="true">#</a> 实现</h3>',11),V=n("p",null,[n("strong",null,"请求转发")],-1),G={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-path-route-predicate-factory",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"/api/**",-1),W={href:"http://localhost:8123/api/",target:"_blank",rel:"noopener noreferrer"},Q=n("p",null,"比如：",-1),X={href:"http://localhost:8090/api/name/get?/name=wlei224",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://localhost:8123/api/name/get?/name=wlei224",target:"_blank",rel:"noopener noreferrer"},Z=e(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>
    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>
      <span class="token key atrule">routes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> path_route
        <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//example.org
        <span class="token key atrule">predicates</span><span class="token punctuation">:</span>
        <span class="token punctuation">-</span> Path=/red/<span class="token punctuation">{</span>segment<span class="token punctuation">}</span><span class="token punctuation">,</span>/blue/<span class="token punctuation">{</span>segment<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>其他业务逻辑</li></ol><blockquote><p>​ todo：Spring注解 @component</p></blockquote><p>​ 使用Spring Cloud Gateway中的GlobalFilter实现请求拦截处理（类似于AOP）</p><p>​ <img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307251948339.png" alt="image-20230725194819206" loading="lazy"></p>`,5),$={href:"https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-combined-global-filter-and-gatewayfilter-ordering",target:"_blank",rel:"noopener noreferrer"},nn=e(`<p>​ 验证通过√</p><ol start="2"><li>正式开始写业务逻辑</li></ol><blockquote><ol><li><p>用户发送请求到API网关（请求转发）√</p><p>代码能运行到这个controller业务逻辑层，就说明用户已经发送了请求</p></li><li><p><em>请求日志</em></p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307281159504.png" alt="image-20230728115938432" tabindex="0" loading="lazy"><figcaption>image-20230728115938432</figcaption></figure><p>我们发现请求参数中含有一个交换机，于是可以试着从这里找到request请求，拿到请求头中的信息；</p><p>添加<code>@Slf4j</code>注解，用log.info在控制台输出请求头日志；</p></li><li><p><em>黑白名单</em></p><p>在权限管理业务中一般设置的是白名单，这样只有允许的才可以进行访问，更加安全！</p><p>在IDEA中直接敲<code>prsf</code>写一个白名单常量。</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>// 2. 访问控制 -- 设置黑白名单（可以用设置响应状态码来实现）
ServerHttpResponse response = exchange.getResponse();
if(!IP_WHITE_LIST.contains(sourceAdress)) {
    // handleNoAuth(response);
    response.setStatusCode(HttpStatus.FORBIDDEN);
	return response.setComplete();
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>用户鉴权（如何？判断ak、sk）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//  用户鉴权（如何？判断ak、sk）</span>
<span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> accessKey <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;accessKey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> nonce <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;nonce&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> timeStamp <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;timeStamp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sign <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;sign&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> body <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// TODO 要去数据库中查询</span>
<span class="token comment">// 为了方便进行校验，直接进行判断数据，正规来说应该从数据库中进行校验数据</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;wl&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// throw new RuntimeException(&quot;无权限！&quot;);</span>
    <span class="token comment">// 封装了一个方法，专门用于处理异常请求</span>
    <span class="token keyword">return</span> <span class="token function">handleNoAuth</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">handleNoAuth</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
                                 
<span class="token comment">//  时间戳校验自己实现，时间和当前时间不能超过5min</span>
<span class="token class-name">Long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">;</span>
<span class="token class-name">Long</span> <span class="token constant">FIVE_MINUTES</span> <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">5L</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currentTime<span class="token operator">-</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>timeStamp<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token constant">FIVE_MINUTES</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">handleNoAuth</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
                                 
<span class="token comment">// TODO 要去数据库中查询</span>
<span class="token class-name">String</span> serverSign <span class="token operator">=</span> <span class="token class-name">SignUtils</span><span class="token punctuation">.</span><span class="token function">getSign</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">&quot;abcdefgh&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>serverSign<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;无权限！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>请求的模拟接口是否存在？</p><p>// TODO 从数据库中进行查询接口是否存在，以及请求方法是否匹配（严格的话可以再校验一下请求参数，但是业务层面的请求参数不建议放到全局请求网关里面） // 因为数据库的访问方法已经再backend中已经写过，操作较为复杂的话不建议重复写，所以我们可以采用远程调用的方式（也就是可以说是微服务，这个项目完全可以写成微服务：<code>OpenFeigh</code>，目前项目的定位还是<code>分布式项目</code>结合微服务的远程调用，避免重复写业务逻辑）</p></li><li><p>请求转发，调用模拟接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> filter <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>响应日志</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;响应：&quot;</span> <span class="token operator">+</span> response<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调用成功，接口调用次数 + 1</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// TODO invokeCount</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调用失败，返回规范错误码</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>// 用户鉴权异常
    public Mono&lt;Void&gt; handleNoAuth(ServerHttpResponse response) {
        response.setStatusCode(HttpStatus.FORBIDDEN);
        return response.setComplete();
    }
    // 自定义错误异常
    public Mono&lt;Void&gt; handleInvokeError(ServerHttpResponse response) {
        response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
        return response.setComplete();
    }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></blockquote><ul><li>为了方便进行业务逻辑的编写，我们可以向上面一样，将提前编写好的业务流程粘贴到类文件中。</li></ul><h3 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h3>`,5),sn={href:"http://127.0.0.1:8090/api/name/get?name=wl%E8%BF%9B%E8%A1%8C%E8%AE%BF%E9%97%AE%E6%97%B6%EF%BC%8C%E8%BF%98%E6%98%AF%E4%BC%9A%E9%81%AD%E5%88%B0%E6%8B%92%E7%BB%9D%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E5%91%A2%EF%BC%9F%E6%AD%A4%E6%97%B6%E4%B8%8D%E6%98%AF%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%B8%A2%E5%A4%B1%EF%BC%8C%E8%80%8C%E6%98%AF%E6%88%91%E4%BB%AC%E6%A0%B9%E6%9C%AC%E5%B0%B1%E6%B2%A1%E5%86%99%E8%AF%B7%E6%B1%82%E5%A4%B4%EF%BC%8C%E8%B7%91%E9%80%9A%E8%BF%99%E4%B8%AA%E9%80%BB%E8%BE%91%E7%9A%84%E8%AF%9D%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BB%8E%E5%89%8D%E7%AB%AF%E8%BF%9B%E8%A1%8C%E8%B0%83%E7%94%A8%E6%B5%8B%E8%AF%95%E3%80%82",target:"_blank",rel:"noopener noreferrer"},an=e('<figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202308030251719.png" alt="image-20230803025109861" tabindex="0" loading="lazy"><figcaption>image-20230803025109861</figcaption></figure><h3 id="🧑‍💻业务逻辑预期结果" tabindex="-1"><a class="header-anchor" href="#🧑‍💻业务逻辑预期结果" aria-hidden="true">#</a> 🧑‍💻业务逻辑预期结果：</h3><p>等模拟接口调用完成，才记录响应日志、统计调用次数。</p><h3 id="存在问题" tabindex="-1"><a class="header-anchor" href="#存在问题" aria-hidden="true">#</a> 存在问题：</h3>',4),tn=e("<p>虽然上述代码可以跑通，但是还存在一个问题，我们通过debug模式可以看到，代码在执行到请求转发的<code>Mono&lt;Void&gt; filter = chain.filter(exchange);</code>方法后，并没有进入到方法中，反而是继续执行下面的代码，直到<code>chain.filter</code>方法之后才进入模拟接口方法中。</p><p><code>原因：</code></p><p>chain.filter是个异步操作，可以理解为前端的promise</p><p><code>解决方案：</code></p><p>利用Spring Cloud Gateway提供的自定义响应装饰器中的response装饰者，以次增强原有response的处理能力</p><p>引申：什么叫装饰者设计模式？</p><p>​ 作用就是：在原本类的基础上对原有类的能力的增强，也就可以理解为给response买了一件装备，拥有了更多的能力。解释成代码语言意思就是，增写response部分代码，实现需要的功能。</p><p><code>参考博客：</code></p>",8),en={href:"https://blog.csdn.net/qq_19636353/article/details/126759522",target:"_blank",rel:"noopener noreferrer"},pn=n("p",null,[n("code",null,"其他参考：")],-1),on={href:"https://blog.csdn.net/m0_67595943/article/details/124667975",target:"_blank",rel:"noopener noreferrer"},cn={href:"https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501",target:"_blank",rel:"noopener noreferrer"},ln={href:"https://blog.csdn.net/zx156955/article/details/121670681",target:"_blank",rel:"noopener noreferrer"},un={href:"https://blog.csdn.net/qq_39529562/article/details/108911983",target:"_blank",rel:"noopener noreferrer"},rn=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleResponse</span><span class="token punctuation">(</span><span class="token class-name">ServerWebExchange</span> exchange<span class="token punctuation">,</span> <span class="token class-name">GatewayFilterChain</span> chain<span class="token punctuation">)</span><span class="token punctuation">{</span>  

    <span class="token keyword">try</span> <span class="token punctuation">{</span>  
        <span class="token comment">//从交换寄拿响应对象  </span>
        <span class="token class-name">ServerHttpResponse</span> originalResponse <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//缓冲区工厂，拿到缓存数据  </span>
        <span class="token class-name">DataBufferFactory</span> bufferFactory <span class="token operator">=</span> originalResponse<span class="token punctuation">.</span><span class="token function">bufferFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token comment">//拿到响应码  </span>
        <span class="token class-name">HttpStatus</span> statusCode <span class="token operator">=</span> originalResponse<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span>statusCode <span class="token operator">==</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span><span class="token constant">OK</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
            <span class="token comment">//装饰，增强能力  </span>
            <span class="token class-name">ServerHttpResponseDecorator</span> decoratedResponse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerHttpResponseDecorator</span><span class="token punctuation">(</span>originalResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
            <span class="token comment">//等调用完转发的接口后才会执行</span>
                <span class="token annotation punctuation">@Override</span>  
                <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> <span class="token function">writeWith</span><span class="token punctuation">(</span><span class="token class-name">Publisher</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">&gt;</span></span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;body instanceof Flux: {}&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Flux</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token comment">//对象是响应式的  </span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>body <span class="token keyword">instanceof</span> <span class="token class-name">Flux</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  
                        <span class="token comment">//我们拿到真正的body  </span>
                        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">DataBuffer</span><span class="token punctuation">&gt;</span></span> fluxBody <span class="token operator">=</span> <span class="token class-name">Flux</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span> 
                        <span class="token comment">//往返回值里面写数据  </span>
                        <span class="token comment">//拼接字符串  </span>
                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>fluxBody<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>dataBuffer <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
                            <span class="token comment">// 7. TODO 调用成功，接口调用次数 + 1 invokeCount</span>
                            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>dataBuffer<span class="token punctuation">.</span><span class="token function">readableByteCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
                            dataBuffer<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                            <span class="token class-name">DataBufferUtils</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>dataBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放掉内存  </span>
                            <span class="token comment">// 构建日志  </span>
                            <span class="token class-name">StringBuilder</span> sb2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                            sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;--- {} {} \\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> rspArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                            rspArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>originalResponse<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                            <span class="token comment">//rspArgs.add(requestUrl);  </span>
                            <span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//data </span>
                            sb2<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>sb2<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rspArgs<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//log.info(&quot;&lt;-- {} {}\\n&quot;, originalResponse.getStatusCode(), data);  </span>
                           <span class="token keyword">return</span> bufferFactory<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  
                        <span class="token comment">// 8. 调用失败，fan&#39;hui一个规范的</span>
                        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;--- {} 响应code异常&quot;</span><span class="token punctuation">,</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
                    <span class="token punctuation">}</span>  
                    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">writeWith</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  
                <span class="token punctuation">}</span>  
            <span class="token punctuation">}</span><span class="token punctuation">;</span>  
            <span class="token comment">//设置 response 对象为装饰过的  </span>
            <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">response</span><span class="token punctuation">(</span>decoratedResponse<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token punctuation">}</span>  
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//降级处理返回数据  </span>
    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;gateway log exception.\\n&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="day06-完善网关的业务逻辑" tabindex="-1"><a class="header-anchor" href="#day06-完善网关的业务逻辑" aria-hidden="true">#</a> Day06 完善网关的业务逻辑</h2><h3 id="今日计划-1" tabindex="-1"><a class="header-anchor" href="#今日计划-1" aria-hidden="true">#</a> 今日计划</h3><ol><li>补充完整网关的业务逻辑（如何操作数据库?如何服用之前写过的方法？RPC）</li><li>完善系统的TODO和其他功能，并开发一个管理员的监控统计功能</li></ol><h3 id="网关业务逻辑" tabindex="-1"><a class="header-anchor" href="#网关业务逻辑" aria-hidden="true">#</a> 网关业务逻辑</h3><p>问题：之前的项目已经写过了调用数据库的那些mybatis的业务逻辑，复制粘贴太麻烦</p><p>解决：用一个可以直接调用的解决方法：RPC</p><h3 id="如何调用其他项目的方法" tabindex="-1"><a class="header-anchor" href="#如何调用其他项目的方法" aria-hidden="true">#</a> 如何调用其他项目的方法</h3><ol><li>复制粘贴代码和相关依赖</li><li>HTTP请求（提供接口，供其他项目进行调用）</li><li>jar包调用</li><li>把公共代码达成jar包，其他项目直接引用</li></ol><h3 id="http请求怎么调用" tabindex="-1"><a class="header-anchor" href="#http请求怎么调用" aria-hidden="true">#</a> HTTP请求怎么调用</h3><ol><li>提供方开发一个接口（地址、请求方法、参数、返回值）</li><li>调用方使用<code>HTTP Client</code>之类的代码取发送HTTP请求</li></ol><h3 id="rpc-remote-produce-call" tabindex="-1"><a class="header-anchor" href="#rpc-remote-produce-call" aria-hidden="true">#</a> RPC（remote produce call）</h3><p><strong>作用：像调用本地方法一样去调用远程方法</strong></p><p>优点：</p><pre><code>1. 对开发者更加透明，减少了调用见的沟通成本
1. RPC向远程服务器发送请求时，未必要使用HTTP协议，比如：TCP/IP、或者自己封装的协议。（内部服务更加适用）
</code></pre><h3 id="feign-rpc" tabindex="-1"><a class="header-anchor" href="#feign-rpc" aria-hidden="true">#</a> <code>Feign &amp;&amp; RPC</code></h3><blockquote><p>Feign底层用的HTTP协议，虽然也可以很方便的进行调用，但是区别在于Feign只是让请求过程更加精简,HTTP请求其实可以做到和RPC一样的事情，但是还有区别：RPC向远程服务器发送请求时，未必要使用HTTP协议，比如：TCP/IP、或者自己封装的协议。</p></blockquote><p>HTTP协议是一个7层协议，如果想要接口的性能更高，可以使用TCP/IP协议，更加原生的协议。</p><p>一般来说微服务项目内部的接口，用<code>RPC</code>的性能可能会更加高一点，协议可选项更加多一点。</p><p><code>工作流程图：</code></p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307292328515.png" alt="image-20230729232829504" tabindex="0" loading="lazy"><figcaption>image-20230729232829504</figcaption></figure><p>🆗，现在模型已经搭建好了，那么如何进行实现呢？使用Dubbo框架（如何学习？看官方文档）</p><h3 id="dubbo框架-rpc实现-阿里公司的" tabindex="-1"><a class="header-anchor" href="#dubbo框架-rpc实现-阿里公司的" aria-hidden="true">#</a> Dubbo框架（RPC实现）（阿里公司的）</h3><p>其它类似的框架还有<code>GRPC</code>（Google公司的）、<code>TRPC</code>（腾讯公司的）</p>`,24),dn={href:"https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/quick-start/spring-boot/",target:"_blank",rel:"noopener noreferrer"},kn=n("h3",{id:"两种使用方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#两种使用方式","aria-hidden":"true"},"#"),s(" 两种使用方式")],-1),mn=n("li",null,[n("p",null,"Spring Boot代码（注解+编程式）：写Java接口，服务提供者和消费者都去引用这个接口 偏程导")],-1),vn=n("p",null,"IDL(接口调用语言)：创建一个公共的接口定义文件，服务提供者和消费者读取这个文件。",-1),bn=n("p",null,"优点：",-1),gn=n("li",null,[n("p",null,"跨语言，所有的框架都认识")],-1),fn={href:"https://cn.dubbo.apache.org/zh-cn/overview/mannual/java-sdk/reference-manual/protocol/triple/",target:"_blank",rel:"noopener noreferrer"},hn=n("figure",null,[n("img",{src:"https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307300038465.png",alt:"image-20230730003800623",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20230730003800623")],-1),yn=e(`<h3 id="示例项目学习" tabindex="-1"><a class="header-anchor" href="#示例项目学习" aria-hidden="true">#</a> 示例项目学习</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>git clone -b master https://github.com/apache/dubbo-samples.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>zookeeper注册中心：通过内嵌的方式运行，更方便</p><p>最先启动注册中心，先启动服务提供者，再启动服务消费者</p><h3 id="整合应用" tabindex="-1"><a class="header-anchor" href="#整合应用" aria-hidden="true">#</a> 整合应用</h3><ol><li><p>服务提供者：backend</p><p>a. 实际情况应该是去数据库中查是否已分配给用户</p><p>b. 从数据库中查询模拟接口是否存在，以及请求方法是否匹配（还可以校验请求参数）</p><p>c. 调用成功，接口调用次数+1 invokeCount</p></li><li><p>gateway项日作为服务调用者，调用这3个方法</p></li></ol><blockquote><p>整合步骤：</p><ol><li><p>依赖引入 视频事件：<code>00:52</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>                              
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将官方示例代码中的privider包粘到backend中</p></li></ol></blockquote><h2 id="day07-完善网关业务与上线" tabindex="-1"><a class="header-anchor" href="#day07-完善网关业务与上线" aria-hidden="true">#</a> Day07 完善网关业务与上线</h2><h3 id="今日计划-2" tabindex="-1"><a class="header-anchor" href="#今日计划-2" aria-hidden="true">#</a> 今日计划</h3><ol><li>完善网关的业务</li><li>开发管理员的分析功能</li><li>项目上线</li></ol><h3 id="整合nacos" tabindex="-1"><a class="header-anchor" href="#整合nacos" aria-hidden="true">#</a> 整合nacos</h3><blockquote><p>遇到一个<code>nocos</code>小BUG：</p><p>Dubbo整合nocos的时候，提供者与消费者的包名不一样，这时，提供者将接口的信息注册到nacos文档时，用到的是provider的包名路径，如果出现消费者的包名路径与提供者的包名不同的时候，这时消费者就会报错找不到提供者的Service服务，如图：</p><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202307311932647.png" alt="image-20230731193204173" tabindex="0" loading="lazy"><figcaption>image-20230731193204173</figcaption></figure></blockquote><h3 id="重新梳理网关的业务逻辑" tabindex="-1"><a class="header-anchor" href="#重新梳理网关的业务逻辑" aria-hidden="true">#</a> 重新梳理网关的业务逻辑</h3><ol><li><p>实际情况应该是去数据库中查是否已分配给用户</p><p>a 先根据 accessKey 判断用户是否存在，查到 secretKey b 对比 secretKey 和用户传的加密后的 secretKey 是否一致</p></li><li><p>从数据库中查询模拟接口是否存在，以及请求方法是否匹配（还可以校验请求参数）</p></li><li><p>调用成功，接口调用次数+1 invokeCount</p></li></ol><h3 id="公共服务" tabindex="-1"><a class="header-anchor" href="#公共服务" aria-hidden="true">#</a> 公共服务</h3><blockquote><p>目的是让方法、实体在多个项目中进行复用，避免重复编写</p></blockquote><ul><li><p>业务分析</p><ul><li><ol><li>数据库中是否已分配给用户密钥（accesskey、secretkey，返回用户信息，为空表示不存在）√</li><li>从数据库中查询模拟接口是否存在（请求路径、请求方法、请求参数，返回接口信息，为空表示不存在）</li><li>接口调用次数 + 1 <code>invokeCount</code>（ak、sk、请求接口路径）√</li></ol></li></ul></li><li><p>使用步骤：</p><ul><li><ol><li>新建干净的 maven 项目，只保留必要的公共依赖</li></ol></li><li><ol start="2"><li>抽取 service 和实体类</li></ol></li><li><ol start="3"><li>install 本地 maven 包</li></ol></li><li><ol start="4"><li><p>让服务提供者引入 common 包，测试是否正常运行（出现Bug，backend包中的实现类一直报错：</p><blockquote><p><code>&#39;getBaseMapper()&#39; in &#39;com.baomidou.mybatisplus.extension.service.impl.ServiceImpl&#39; clashes with &#39;getBaseMapper()&#39; in &#39;com.baomidou.mybatisplus.extension.service.IService&#39;; attempting to use incompatible return type</code></p><p>原因是<code>UserInterfaceInfoMapper</code>类中，忘记更改引入的实体类路径。</p><p>小技巧：<img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202308030513641.png" alt="image-20230803051309362" loading="lazy"></p><p>可以通过这种方式快速实现外部提供的的接口。</p></blockquote></li></ol></li><li><ol start="5"><li>让服务消费者引入 common 包</li></ol></li></ul></li><li><p>业务流程</p><ul><li><ol><li>新建干净的 maven 项目，只保留必要的公共依赖</li></ol></li><li><ol start="2"><li>抽取 service 和实体类</li></ol></li><li><ol start="3"><li>install 本地 maven 包</li></ol></li><li><ol start="4"><li>让服务提供者引入 common 包，测试是否正常运行，加上@DubboService，以便供其它类使用</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// mybatisplus真好用！业务crud手到擒来！</span>
<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> WLei224
 * <span class="token keyword">@create</span> 2023/8/3 5:15
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerInterfaceInfoServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">InnerInterfaceInfoService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">InterfaceInfoMapper</span> interfaceInfoMapper<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">InterfaceInfo</span> <span class="token function">getInterfaceInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyBlank</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">PARAMS_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InterfaceInfo</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;method&quot;</span><span class="token punctuation">,</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> interfaceInfoMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><ol start="5"><li>让服务消费者引入 common 包</li></ol><blockquote><ol><li><p>API网关项目中引入 common 依赖</p></li><li><p>使用服务提供者提供的服务（@DubboService和@DubboReference）</p><p>通过@DubboReference注入公共模块中编写好的三个服务</p></li><li><p>完善网关中的todo标签，完善业务逻辑</p></li></ol></blockquote></li></ul><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>​ 项目调试中存在一个问题：需要手动对接口的调用次数进行分配，这里考虑可以增加一个管理调用次数的接口。</p></li></ul><h3 id="统计分析功能" tabindex="-1"><a class="header-anchor" href="#统计分析功能" aria-hidden="true">#</a> 统计分析功能</h3><h4 id="需求" tabindex="-1"><a class="header-anchor" href="#需求" aria-hidden="true">#</a> 需求</h4><p>各个接口的总调用次数的占比图（饼图），取调用次数最多的三个接口，从而进行分析出哪个接口还没有人进行调用，进而对其降低资源或者下线，高频接口（增加资源、提高收费）</p><h4 id="实现-2" tabindex="-1"><a class="header-anchor" href="#实现-2" aria-hidden="true">#</a> 实现</h4>`,21),wn=n("p",null,[n("strong",null,"前端")],-1),In=n("p",null,"强烈推荐使用现成的库",-1),_n={href:"https://echarts.apache.org/zh/index.html%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},qn={href:"https://antv.vision/zh%EF%BC%88%E6%8E%A8%E8%8D%90%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},xn=n("li",null,[n("p",null,"BizCharts")],-1),En={href:"https://github.com/hustcc/echarts-for-react",target:"_blank",rel:"noopener noreferrer"},Sn=n("li",null,[n("blockquote",null,[n("p",null,"怎么用？"),n("ol",null,[n("li",null,"看官网"),n("li",null,"找到快速入门、按文档去引入库"),n("li",null,"进入示例页面"),n("li",null,"找到你要的图"),n("li",null,"在线调试"),n("li",null,"复制代码"),n("li",null,"改为真实数据")])])],-1),Cn=e(`<li><p><strong>后端</strong></p><ul><li><p>写一个接口，得到下列示例数据： 接口 A：2次 接口 B：3次</p></li><li><p>步骤：</p><ol><li><p>SQL 查询调用数据：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> interfaceInfoId<span class="token punctuation">,</span> <span class="token function">sum</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">)</span> <span class="token keyword">as</span> totalNum <span class="token keyword">from</span> user_interface_info <span class="token keyword">group</span> <span class="token keyword">by</span> interfaceInfoId <span class="token keyword">order</span> <span class="token keyword">by</span> totalNum <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>业务层去关联查询接口信息。</p><p><code>controller</code>:（就不写Service了，直接写业务逻辑）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 分析控制器
 * <span class="token keyword">@author</span> yupi
 */</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/analysis&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnalysisController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">UserInterfaceInfoMapper</span> userInterfaceInfoMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">InterfaceInfoService</span> interfaceInfoService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/top/interface/invoke&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@AuthCheck</span><span class="token punctuation">(</span>mustRole <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">BaseResponse</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">InterfaceInfoVO</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">listTopInvokeInterfaceInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInterfaceInfo</span><span class="token punctuation">&gt;</span></span> userInterfaceInfoList <span class="token operator">=</span> userInterfaceInfoMapper<span class="token punctuation">.</span><span class="token function">listTopInvokeInterfaceInfo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">UserInterfaceInfo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> interfaceInfoIdObjMap <span class="token operator">=</span> userInterfaceInfoList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span><span class="token class-name">UserInterfaceInfo</span><span class="token operator">::</span><span class="token function">getInterfaceInfoId</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InterfaceInfo</span><span class="token punctuation">&gt;</span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryWrapper<span class="token punctuation">.</span><span class="token function">in</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> interfaceInfoIdObjMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InterfaceInfo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> interfaceInfoService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token class-name">ErrorCode</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InterfaceInfoVO</span><span class="token punctuation">&gt;</span></span> interfaceInfoVOList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>interfaceInfo <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">InterfaceInfoVO</span> interfaceInfoVO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InterfaceInfoVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>interfaceInfo<span class="token punctuation">,</span> interfaceInfoVO<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> totalNum <span class="token operator">=</span> interfaceInfoIdObjMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>interfaceInfo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTotalNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            interfaceInfoVO<span class="token punctuation">.</span><span class="token function">setTotalNum</span><span class="token punctuation">(</span>totalNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> interfaceInfoVO<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResultUtils</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>interfaceInfoVOList<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>封装类</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 接口信息封装视图
 * @TableName product
 */</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterfaceInfoVO</span> <span class="token keyword">extends</span> <span class="token class-name">InterfaceInfo</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 调用次数
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> totalNum<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>UserInterfaceInfoMapper</code>:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * @Entity com.wl.smartapicommon.model.entity.UserInterfaceInfo
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserInterfaceInfoMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInterfaceInfo</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 获取前几个调用次数最多的接口</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInterfaceInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">listTopInvokeInterfaceInfo</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>xml中添加sql语句</code>：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listTopInvokeInterfaceInfo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.wl.smartapicommon.model.entity.UserInterfaceInfo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select interfaceInfoId, sum(totalNum) as totalNum
    from user_interface_info
    group by interfaceInfoId
    order by totalNum
    desc limit #{limit};
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ul></li>`,1),Rn=e('<h3 id="上线计划" tabindex="-1"><a class="header-anchor" href="#上线计划" aria-hidden="true">#</a> 上线计划</h3><ul><li>前端：参考之前用户中心或伙伴匹配系统的上线方式</li><li>后端： <ul><li>backend 项目：web 项目，部署 spring boot 的 jar 包（对外的）</li><li>gateway 网关项目：web 项目，部署 spring boot 的 jar 包（对外的）</li><li>interface 模拟接口项目：web 项目，部署 spring boot 的 jar 包（不建议对外暴露的）</li></ul></li></ul><p><em><strong>关键：网络必须要连通</strong></em></p><blockquote><p>如果自己学习用：单个服务器部署这三个项目就足够。 如果你是搞大事，多个服务器建议在 同一内网 ，内网交互会更快、且更安全。</p></blockquote><h3 id="项目扩展思路" tabindex="-1"><a class="header-anchor" href="#项目扩展思路" aria-hidden="true">#</a> 项目扩展思路</h3><ol><li><p>用户自己可以申请更换签名</p></li><li><p>怎么让其他用户也能上传接口？</p><blockquote><ul><li>需要提供一个机制（一个页面），让用户来输入自己的接口host（都武器的地址）、接口信息、将接口写入数据库；</li><li>可以在interfaceInfo表中加个host字段，以次区分服务器地址，让接口提供者更灵活的接入系统；</li><li>将接口信息入库前，要对接口进行校验，比如检查地址是否遵循规则、是否可以正常调用,并遵循甲方要求（使用SDK）</li></ul></blockquote></li><li><p>网关校验是否还有调用次数</p><p>需要考虑并发的问题，防止瞬间调用超频。</p></li><li><p>网关优化</p><p>比如增加限流、降级保护、提高性能等。还可以考虑搭配Nginx网关使用。</p></li><li><p>功能增强</p><p>可以针对不同的请求头或者接口类型来设计前端界面和表单，百年与用户进行调用，增强体验。</p><p>（可以参考swagger、postman、kniffj的界面）</p></li></ol>',6);function Tn(An,Bn){const a=c("ExternalLinkIcon");return o(),i("div",null,[u,n("p",null,[s("这里我们使用HuTool来进行调用"),n("a",r,[s("HuTool"),t(a)])]),d,n("p",null,[n("a",k,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories"),t(a)])]),m,n("p",null,[n("a",v,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#cors-configuration"),t(a)])]),b,n("p",null,[n("a",g,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-weight-route-predicate-"),t(a)]),s(" factory")]),f,h,n("p",null,[s("给请求（流量）添加一些标识，一般是设置请求头中，添加新的请求头 "),n("a",y,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestheader-gatewayfilter-factory"),t(a)])]),n("p",null,[s("全局染色："),n("a",w,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#default-filters"),t(a)])]),I,n("p",null,[s("1 限制请求 "),n("a",_,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#requestheadersiz-gatewayfilter-factory"),t(a)])]),n("p",null,[s("2 信息脱敏 "),n("a",q,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-removerequestheader-gatewayfilter-factory"),t(a)])]),n("p",null,[s("3 降级（熔断） 进行兜底 "),n("a",x,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#fallback-headers"),t(a)])]),n("p",null,[s("4 限流 "),n("a",E,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-requestratelimiter-gatewayfilter-factory"),t(a)])]),n("p",null,[s("5 超时时间 超时就中断 "),n("a",S,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#http-timeouts-configuration"),t(a)])]),n("p",null,[s("6 重试（业务保护）： "),n("a",C,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-retry-gatewayfilter-factory"),t(a)])]),R,T,A,B,n("p",null,[s("建议用："),n("a",P,[s("https://doc.xiaominfo.com/docs/middleware-sources/,aggregation-introduction"),t(a)])]),D,n("ol",null,[H,n("li",null,[j,n("p",null,[s("参考文章："),n("a",O,[s("https://blog.csdn.net/qq21040559/article/,details/,122961395"),t(a)])])])]),M,n("p",null,[s("网关技术选型："),n("a",F,[s("https://zhuanlan.zhihu.com/p/500587132"),t(a)])]),U,N,n("p",null,[s("去看官网："),n("a",L,[s("https://spring.io/projects/spring-cloud-gateway"),t(a)])]),n("p",null,[s("官方文档："),n("a",z,[s("https://docs.spring.io/spring-cloud-gateway/docs/current/reference//html/"),t(a)])]),K,n("ol",null,[n("li",null,[V,n("p",null,[n("a",G,[s("使用前缀匹配断言"),t(a)])]),n("p",null,[s("所有路径为："),J,s(" 的请求转发，转发到"),n("a",W,[s("http://localhost:8123/api/"),t(a)]),s("**")]),Q,n("p",null,[s("请求于"),n("a",X,[s("http://localhost:8090/api/name/get?/name=wlei224"),t(a)])]),n("p",null,[s("转发到"),n("a",Y,[s("http://localhost:8123/api/name/get?/name=wlei224"),t(a)])])])]),Z,n("p",null,[s("​ "),n("a",$,[s("GlobalFilter"),t(a)]),s("直接复制代码到网关项目的全局异常类中。")]),nn,n("p",null,[s("通过测试我们发现，通过"),n("a",sn,[s("http://127.0.0.1:8090/api/name/get?name=wl进行访问时，还是会遭到拒绝，为什么呢？此时不是请求头丢失，而是我们根本就没写请求头，跑通这个逻辑的话，可以从前端进行调用测试。"),t(a)])]),an,n("blockquote",null,[tn,n("p",null,[n("a",en,[s("https://blog.csdn.net/qq_19636353/article/details/126759522"),t(a)]),s(" (以这个为主)")]),pn,n("p",null,[n("a",on,[s("https://blog.csdn.net/m0_67595943/article/details/124667975"),t(a)])]),n("p",null,[n("a",cn,[s("https://blog.csdn.net/weixin_43933728/article/details/121359727?spm=1001.2014.3001.5501"),t(a)])]),n("p",null,[n("a",ln,[s("https://blog.csdn.net/zx156955/article/details/121670681"),t(a)]),s(),n("a",un,[s("https://blog.csdn.net/qq_39529562/article/details/108911983"),t(a)])])]),rn,n("p",null,[s("最好的学习方式："),n("a",dn,[s("阅读官方文档！"),t(a)])]),kn,n("ol",null,[mn,n("li",null,[vn,bn,n("ul",null,[gn,n("li",null,[n("p",null,[s("底层是Triple（自定义封装协议，优点见"),n("a",fn,[s("官文"),t(a)]),s("）")]),hn])])])]),yn,n("ul",null,[n("li",null,[wn,n("ul",null,[n("li",null,[In,n("ul",null,[n("li",null,[n("p",null,[s("Echarts："),n("a",_n,[s("https://echarts.apache.org/zh/index.html（推荐）"),t(a)])])]),n("li",null,[n("p",null,[s("AntV："),n("a",qn,[s("https://antv.vision/zh（推荐）"),t(a)])])]),xn,n("li",null,[n("p",null,[s("如果是 React 项目，用这个库："),n("a",En,[s("https://github.com/hustcc/echarts-for-react"),t(a)])])]),Sn])])])]),Cn]),Rn])}const Dn=p(l,[["render",Tn],["__file","api.html.vue"]]);export{Dn as default};
