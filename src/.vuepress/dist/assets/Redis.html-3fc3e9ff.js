import{_ as e,X as i,Y as t,Z as n,a1 as l,$ as p,a2 as a,C as o}from"./framework-4b576256.js";const c={},d=a('<h1 id="黑马redis" tabindex="-1"><a class="header-anchor" href="#黑马redis" aria-hidden="true">#</a> 黑马Redis</h1><h2 id="redis数据结构介绍" tabindex="-1"><a class="header-anchor" href="#redis数据结构介绍" aria-hidden="true">#</a> Redis数据结构介绍</h2><figure><img src="http://images.rl0206.love/202304250154402.png" alt="image-20230416085738929" tabindex="0" loading="lazy"><figcaption>image-20230416085738929</figcaption></figure>',3),u={href:"https://redis.io/commands/",target:"_blank",rel:"noopener noreferrer"},r=a(`<h2 id="redis命令" tabindex="-1"><a class="header-anchor" href="#redis命令" aria-hidden="true">#</a> Redis命令</h2><figure><img src="http://images.rl0206.love/202304250154407.png" alt="image-20230416091404745" tabindex="0" loading="lazy"><figcaption>image-20230416091404745</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154409.png" alt="image-20230416092238674" tabindex="0" loading="lazy"><figcaption>image-20230416092238674</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154410.png" alt="image-20230416093225232" tabindex="0" loading="lazy"><figcaption>image-20230416093225232</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154411.png" alt="image-20230416094344011" tabindex="0" loading="lazy"><figcaption>image-20230416094344011</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154412.png" alt="image-20230416100340583" tabindex="0" loading="lazy"><figcaption>image-20230416100340583</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154413.png" alt="image-20230416100753096" tabindex="0" loading="lazy"><figcaption>image-20230416100753096</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154414.png" alt="image-20230416101608129" tabindex="0" loading="lazy"><figcaption>image-20230416101608129</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154415.png" alt="image-20230416101850417" tabindex="0" loading="lazy"><figcaption>image-20230416101850417</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154416.png" alt="image-20230416102809805" tabindex="0" loading="lazy"><figcaption>image-20230416102809805</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154417.png" alt="image-20230416103712554" tabindex="0" loading="lazy"><figcaption>image-20230416103712554</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154419.png" alt="image-20230416105319879" tabindex="0" loading="lazy"><figcaption>image-20230416105319879</figcaption></figure><p>注意：所有的排名都是升序，若要降序，则在Z的后面加REV即可。</p><h2 id="redis客户端" tabindex="-1"><a class="header-anchor" href="#redis客户端" aria-hidden="true">#</a> Redis客户端</h2><figure><img src="http://images.rl0206.love/202304250154420.png" alt="image-20230416111339698" tabindex="0" loading="lazy"><figcaption>image-20230416111339698</figcaption></figure><figure><img src="http://images.rl0206.love/202304250154421.png" alt="image-20230416111856694" tabindex="0" loading="lazy"><figcaption>image-20230416111856694</figcaption></figure><p>Jedis使用的基本步骤：</p><p>1.引入依赖</p><p>2.创建Jedis对象，建立连接</p><p>3.使用Jedis，方法名与Redis命令一致</p><p>4.释放资源</p><p>1、引入依赖</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>&lt;dependency&gt;
    &lt;groupId&gt;redis.clients&lt;/groupId&gt;
    &lt;artifactId&gt;jedis&lt;/artifactId&gt;
    &lt;version&gt;3.7.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、使用Jedis连接池创建连接</p><p>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class JedisConnectionFactory {
   private static final JedisPool jedisPool;

   static {
     JedisPoolConfig jedisPoolConfig = new JedisPoolConfig();
     // 最大连接
     jedisPoolConfig.setMaxTotal(8);
     // 最大空闲连接
     jedisPoolConfig.setMaxIdle(8); 
     // 最小空闲连接
     jedisPoolConfig.setMinIdle(0);
     // 设置最长等待时间， ms
     jedisPoolConfig.setMaxWaitMillis(200);
     jedisPool = new JedisPool(jedisPoolConfig, &quot;192.168.150.101&quot;, 6379,
         1000, &quot;123321&quot;);
   }
   // 获取Jedis对象
   public static Jedis getJedis(){
     return jedisPool.getResource();
   }
 }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、使用Jedis进行单元测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Jedis</span> jedis<span class="token punctuation">;</span>
  <span class="token comment">// 单元测试的注释写法</span>
  <span class="token annotation punctuation">@BeforeEach</span>
  <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 建立连接</span>
    jedis <span class="token operator">=</span> <span class="token class-name">JedisConnectionFactory</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置密码</span>
    jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">&quot;123321&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 选择库</span>
    jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  <span class="token annotation punctuation">@Test</span>
  <span class="token keyword">void</span> <span class="token function">testString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 插入数据，方法名称就是redis命令名称，非常简单</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token comment">// 获取数据</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name = &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
  <span class="token annotation punctuation">@AfterEach</span>
  <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 释放资源</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>jedis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="springdataredis" tabindex="-1"><a class="header-anchor" href="#springdataredis" aria-hidden="true">#</a> SpringDataRedis</h2><blockquote><p>打破Redis只接收String，接收Object类，内部通过JDK的序列化工具进行转换。（即传入一个Object对象，会将其序列化，将其“剁碎”，传入Redis，若想不剁碎，就需要重写RedisTemplate的序列化方式）</p></blockquote><p>那我们如何重写呢？</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code></code></pre><div class="line-numbers" aria-hidden="true"></div></div><p>存：自动化将对象转JSON,</p><p>取：JSON反序列化为对象</p><p>什么原理呢？</p><p>我们会发现，在自动化转JSON时，会在JSON中第一行加入User的CLASS属性（对应的是User类的名称），所以说在反序列化的时候，会将对应的User写进来。巧妙之处就在于JSON串第一行的Class名称记录。</p><p>尽管序列化方式可以满足我们的需求，但时仍然存在问题：为了在反序列化时知道对象的类型，JSON选择将类的Class类型写入JSON结果中，存入Redis，因此导致了额外的内存开销。</p><p>那么，如何解决？如何节省内存空间？</p><p>为了节约内存空间，一般不会使用JSON序列化工具，而会使用String序列化器，但这只能存储String类型的键值对，所以我们的解决方案就是：用的到对象反序列化时，再手动创建对象的序列化和反序列化。</p><figure><img src="http://images.rl0206.love/202304250154422.png" alt="image-20230419105307964" tabindex="0" loading="lazy"><figcaption>image-20230419105307964</figcaption></figure><p>Redis序列化两种方案：</p><p>第一种：自定义Templete，修改RedisTemplete的序列化器为GenericJachson2JsonRedisSerializer；</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>public class RedisConfig{
	@Bean
	public RedisTemplete&lt;String,Object&gt; redisTemplete(RedisConnectionFactory connectionFactory){
		
	}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二种：使用RedisRedisTemplete，手动序列化，读取时，手动反序列化。</p>`,44);function g(m,v){const s=o("ExternalLinkIcon");return i(),t("div",null,[d,n("p",null,[n("a",u,[l("redis帮助文档"),p(s)])]),r])}const b=e(c,[["render",g],["__file","Redis.html.vue"]]);export{b as default};
