import{_ as s,X as n,Y as a,$ as e}from"./framework-bb3ac5ef.js";const l={},o=e(`<h1 id="达梦数据库" tabindex="-1"><a class="header-anchor" href="#达梦数据库" aria-hidden="true">#</a> 达梦数据库</h1><blockquote><p>***INTRODUCE:***达梦数据是国内领先的数据库产品开发服务商，致力于成为国际顶尖的全栈数据产品及解决方案提供商。公司拥有核心源代码的自主知识产权，并已完成数十项国家级或省部级科研开发项目与奖项。其产品在金融、能源、航空、通信、党政机关等数十个领域得到应用，2019年至2021年公司产品市占率位居中国数据库管理系统市场国内数据库厂商前列。</p></blockquote><h2 id="达梦线上实验室仿真" tabindex="-1"><a class="header-anchor" href="#达梦线上实验室仿真" aria-hidden="true">#</a> 达梦线上实验室仿真</h2><p>欢迎来到达梦数据库线上实验室。</p><p>如果您是初次接触达梦数据库，我们强烈建议您加入本次线上实验室的试玩旅程。在这里，您将置身于达梦公司自主研发的新一代大型通用关系型数据库 DM8 的仿真环境中，通过 “用户权限”，“操作数据表”，“检索数据”，“创建索引”，“事务特性” 五大板块，初步体验 DM8 的基本特性。同时我们也提供了创建物化视图、存储过程等一系列“SQL 高级特性”供高级玩家探索。</p><p><strong>实验环境：</strong></p><p>操作系统：CentOS Linux release 7.3.1611 (Core)</p><p>达梦数据库实例：DM Database Server 64 V8</p><blockquote><h3 id="检查数据库版本及服务状态" tabindex="-1"><a class="header-anchor" href="#检查数据库版本及服务状态" aria-hidden="true">#</a> 检查数据库版本及服务状态</h3></blockquote><p><strong>查看数据库运行状态：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">status</span>$ <span class="token keyword">as</span> 状态 <span class="token keyword">from</span> v$instance<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行结果：</strong></p><figure><img src="https://eco.dameng.com/tour/markdown/assets/2-1_db_status.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>查看数据库版本：</strong></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> banner <span class="token keyword">as</span> 版本信息 <span class="token keyword">from</span> v$version<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>运行结果：</strong></p><figure><img src="https://eco.dameng.com/tour/markdown/assets/2-2_db_version.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><h3 id="创建用户并授权" tabindex="-1"><a class="header-anchor" href="#创建用户并授权" aria-hidden="true">#</a> 创建用户并授权</h3></blockquote><ul><li><strong>创建用户：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">user</span> root identified <span class="token keyword">by</span> <span class="token string">&quot;123456789&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>授予基本权限：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> resource <span class="token keyword">to</span> root<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>授予用户对指定表的查询权限：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">grant</span> <span class="token keyword">select</span> <span class="token keyword">on</span> <span class="token keyword">user</span><span class="token punctuation">.</span>employee <span class="token keyword">to</span> root<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>查看用户信息：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> username<span class="token punctuation">,</span>account_status<span class="token punctuation">,</span>created <span class="token keyword">from</span> dba_users <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h3 id="切换用户" tabindex="-1"><a class="header-anchor" href="#切换用户" aria-hidden="true">#</a> 切换用户</h3></blockquote><ul><li><strong>切换用户：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>conn username<span class="token operator">/</span>password<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>查看当前登录用户：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token keyword">user</span> <span class="token keyword">from</span> DUAL<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://cdn.jsdelivr.net/gh/wl2o2o/blogCdn/img/202306071107172.png" alt="查询当前登录用户图" tabindex="0" loading="lazy"><figcaption>查询当前登录用户图</figcaption></figure><blockquote><h3 id="创建表并添加约束" tabindex="-1"><a class="header-anchor" href="#创建表并添加约束" aria-hidden="true">#</a> 创建表并添加约束</h3></blockquote><ul><li><strong>创建职员表：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> employee<span class="token punctuation">(</span>
	employee_id <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>
    employee_name vachar2<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>
    hire_date <span class="token keyword">DATE</span><span class="token punctuation">,</span>
    salary <span class="token keyword">INTEGER</span><span class="token punctuation">,</span>
    department_id <span class="token keyword">INTEGER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>创建部门表：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> department<span class="token punctuation">(</span>
  department_id <span class="token keyword">INTEGER</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
  department_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>更新表中字段可以为空：</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> department <span class="token keyword">MODIFY</span> department_name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>非空约束</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> employee <span class="token keyword">MODIFY</span><span class="token punctuation">(</span> hire_date <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>主键约束</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">constraint</span> pk_empid <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>employee_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>外键约束</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> employee <span class="token keyword">add</span> <span class="token keyword">constraint</span> fk_dept <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span>department_id<span class="token punctuation">)</span> <span class="token keyword">references</span> department<span class="token punctuation">(</span>department_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>查看表结构</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DESC</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>查看表的主键外键</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> table_name<span class="token punctuation">,</span> constraint_name<span class="token punctuation">,</span> constraint_type <span class="token keyword">FROM</span>
     all_constraints <span class="token keyword">WHERE</span> owner<span class="token operator">=</span><span class="token string">&#39;DM&#39;</span> <span class="token operator">AND</span> table_name<span class="token operator">=</span><span class="token string">&#39;EMPLOYEE&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><h3 id="验证数据表的crud功能" tabindex="-1"><a class="header-anchor" href="#验证数据表的crud功能" aria-hidden="true">#</a> 验证数据表的CRUD功能</h3></blockquote><ul><li><strong>插入数据</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> department <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;数据库产品中心&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>修改数据</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> department <span class="token keyword">set</span> department_id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>提交事务</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>修改数据</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> employee <span class="token keyword">set</span> salary <span class="token operator">=</span> <span class="token number">20000</span> <span class="token keyword">where</span> employee_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>验证更新表记录能力</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> salary<span class="token punctuation">,</span>employee_name<span class="token punctuation">,</span>employee_id <span class="token keyword">FROM</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>删除数据</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
<span class="token keyword">delete</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> employee_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>验证删除表数据能力</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><h3 id="批量插入及选择排序" tabindex="-1"><a class="header-anchor" href="#批量插入及选择排序" aria-hidden="true">#</a> 批量插入及选择排序</h3></blockquote><p>达梦数据库支持各种数据检索功能，本小节首先批量插入数据，然后验证基本的选择排序功能。</p><ul><li><strong>批量插入数据</strong></li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t1 <span class="token keyword">AS</span>
     <span class="token keyword">SELECT</span> rownum <span class="token keyword">AS</span> id<span class="token punctuation">,</span>
       trunc<span class="token punctuation">(</span>dbms_random<span class="token punctuation">.</span><span class="token keyword">value</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> random_id<span class="token punctuation">,</span>
       dbms_random<span class="token punctuation">.</span>string<span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> random_string
     <span class="token keyword">FROM</span> dual
     <span class="token keyword">connect</span> <span class="token keyword">BY</span> <span class="token keyword">level</span> <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个名为 <code>t1</code> 的新表，并向其中批量插入 100,000 条随机数据。</p><p>具体地，这个 SQL 语句包含以下几个部分：</p><ol><li><code>CREATE TABLE t1 AS SELECT ...</code>：创建一个名为 <code>t1</code> 的新表，并使用 <code>SELECT</code> 语句从 <code>dual</code> 表生成数据。</li><li><code>rownum AS id</code>：使用 <code>rownum</code> 函数生成一个序号列，并将其命名为 <code>id</code>。</li><li><code>trunc(dbms_random.value(0, 100)) AS random_id</code>：使用 <code>dbms_random.value</code> 函数生成一个在 0 和 100 之间的随机数，并将其取整后命名为 <code>random_id</code>。</li><li><code>dbms_random.string(&#39;x&#39;, 20) AS random_string</code>：使用 <code>dbms_random.string</code> 函数生成一个长度为 20 的随机字符串，并将其命名为 <code>random_string</code>。</li><li><code>FROM dual connect BY level &lt;= 100000</code>：使用 <code>dual</code> 表和 <code>connect by level</code> 语句生成 100,000 条数据。</li></ol><p>在 <code>FROM</code> 子句中，使用 <code>DUAL</code> 表生成单行数据，然后使用 <code>CONNECT BY</code> 语法生成 100,000 行数据。在 <code>CONNECT BY</code> 子句中，使用 <code>LEVEL</code> 函数生成一个序号列，并使用 <code>LEVEL</code> 函数的值来控制生成的行数。</p><p>在 <code>SELECT</code> 子句中，使用 <code>dbms_random</code> 包中的函数生成随机数和随机字符串，并使用 <code>trunc</code> 函数对随机数取整。最后，将生成的数据插入到新表 <code>t1</code> 中。</p><p>需要注意的是，在达梦数据库中，语法和函数可能与 Oracle 数据库不同，请根据具体情况选择合适的语法和函数。</p><ul><li>查看插入的数据</li></ul><p>使用count(*) 聚集函数统计t1表中的总数据记录</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>排序数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> t1 <span class="token keyword">where</span> random_id<span class="token operator">&lt;</span><span class="token number">50</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id <span class="token keyword">DESC</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>验证分组查询</p></blockquote><ul><li>批量插入数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> department <span class="token punctuation">(</span>department_id<span class="token punctuation">,</span> department_name<span class="token punctuation">)</span>
     <span class="token keyword">SELECT</span> department_id<span class="token punctuation">,</span> department_name <span class="token keyword">FROM</span> dmhr<span class="token punctuation">.</span>department<span class="token punctuation">;</span>
     
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> employee
     <span class="token punctuation">(</span>employee_id<span class="token punctuation">,</span> employee_name<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> department_id<span class="token punctuation">)</span>
     <span class="token keyword">SELECT</span> employee_id<span class="token punctuation">,</span> employee_name<span class="token punctuation">,</span> hire_date<span class="token punctuation">,</span> salary<span class="token punctuation">,</span>
     department_id <span class="token keyword">FROM</span> dmhr<span class="token punctuation">.</span>employee<span class="token punctuation">;</span>
     
<span class="token keyword">commit</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>分组查询</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> dept<span class="token punctuation">.</span>department_name <span class="token keyword">as</span> 部门<span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 人数
     <span class="token keyword">FROM</span> employee emp<span class="token punctuation">,</span> department dept
     <span class="token keyword">where</span> emp<span class="token punctuation">.</span>department_id<span class="token operator">=</span>dept<span class="token punctuation">.</span>department_id
     <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> dept<span class="token punctuation">.</span>department_name
     <span class="token keyword">HAVING</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>创建视图</p></blockquote><p>达梦数据库支持标准的视图功能，本小节将验证其对标准视图的支持能力。</p><ul><li>定义视图</li></ul><p>需要查询薪资大于 10000 且入职时间大于等于 2013 年 8 月 1 日 员工的部门名称、姓名、薪资、入职时间。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token operator">OR</span> <span class="token keyword">replace</span> <span class="token keyword">VIEW</span> v1 <span class="token keyword">AS</span>
     <span class="token keyword">SELECT</span> dept<span class="token punctuation">.</span>department_name<span class="token punctuation">,</span> emp<span class="token punctuation">.</span>employee_name<span class="token punctuation">,</span>
     emp<span class="token punctuation">.</span>salary<span class="token punctuation">,</span>emp<span class="token punctuation">.</span>hire_date
     <span class="token keyword">FROM</span> employee emp<span class="token punctuation">,</span> department dept
     <span class="token keyword">WHERE</span> salary <span class="token operator">&gt;</span> <span class="token number">10000</span>
     <span class="token operator">AND</span> hire_date <span class="token operator">&gt;=</span> <span class="token string">&#39;2013-08-01&#39;</span>
     <span class="token operator">AND</span> emp<span class="token punctuation">.</span>department_id <span class="token operator">=</span> dept<span class="token punctuation">.</span>department_id<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>视图的作用：</strong></p><p>它的作用是从 employee 和 department 两个表中筛选出满足一定条件的记录，并将它们合并成一个结果集。具体来说，这个视图包含了四个字段，分别是：</p><ul><li>department_name：部门名称，来自 department 表；</li><li>employee_name：员工姓名，来自 employee 表；</li><li>salary：员工薪水，来自 employee 表；</li><li>hire_date：员工入职日期，来自 employee 表。</li></ul><p>通过这个视图，我们就可以方便地查询所有<strong>符合以上三个条件的员工的信息</strong>，包括他们所在的部门、姓名、薪水和入职日期。视图可以看做是一个虚拟的表格，它不存储任何数据，而是通过查询操作来获取数据的。因此，我们可以像查询普通表格一样来查询这个视图，而不用关心它是如何生成的。</p><ul><li>通过视图简化查询符合多个条件的数据</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v1 <span class="token keyword">WHERE</span> hire_date <span class="token operator">&gt;</span> <span class="token string">&#39;2014-09-01&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>创建索引</p></blockquote><p>验证达梦数据库如何创建及删除索引，并通过索引提升查询效率。</p><p>创建普通索引</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">index</span> ind_emp_salary <span class="token keyword">on</span> employee<span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>事务</p></blockquote><p>以下是常用的达梦数据库事务相关语句：</p><p>​ 1.开始事务：<code>START TRANSACTION</code> 或者 <code>BEGIN TRANSACTION</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>START TRANSACTION;
-- 事务执行的 SQL 语句
COMMIT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 2.回滚事务：<code>ROLLBACK</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>START TRANSACTION;
-- 事务执行的 SQL 语句
ROLLBACK;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 3.提交事务：<code>COMMIT</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>START TRANSACTION;
-- 事务执行的 SQL 语句
COMMIT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 4.设置事务隔离级别：<code>SET TRANSACTION ISOLATION LEVEL</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>​ 5.保存点：<code>SAVEPOINT</code> 和 <code>ROLLBACK TO SAVEPOINT</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>START TRANSACTION;
-- 事务执行的 SQL 语句
SAVEPOINT my_savepoint;
-- 更多 SQL 语句
ROLLBACK TO SAVEPOINT my_savepoint;
-- 更多 SQL 语句
COMMIT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 6.设置事务的名称：<code>SAVEPOINT</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SAVEPOINT my_savepoint;
-- 更多 SQL 语句
ROLLBACK TO my_savepoint;
-- 更多 SQL 语句
COMMIT;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上是常用的达梦数据库事务相关语句，您可以根据实际需求选择使用。请注意，在使用事务时，还需要注意锁定和事务隔离级别等问题，以避免出现并发问题和数据不一致的情况。</p>`,114),t=[o];function p(d,i){return n(),a("div",null,t)}const r=s(l,[["render",p],["__file","DMDatabase.html.vue"]]);export{r as default};
