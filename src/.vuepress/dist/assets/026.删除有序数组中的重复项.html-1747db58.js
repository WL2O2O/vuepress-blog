const n=JSON.parse('{"key":"v-d43273ca","path":"/suanfa/026.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.html","title":"026-leetcode","lang":"zh-CN","frontmatter":{"title":"026-leetcode","shortTitle":"026-leetcode","category":["算法"],"tag":["leetcode","数组双指针"],"description":"算法日刷","head":[["meta",{"name":"keywords","content":"删除有序数组中的重复项, 026leetcode, 数组双指针"}],["meta",{"property":"og:url","content":"https://wlei224.gitee.io/suanfa/026.%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9.html"}],["meta",{"property":"og:site_name","content":"CS_GUIDER"}],["meta",{"property":"og:title","content":"026-leetcode"}],["meta",{"property":"og:description","content":"算法日刷"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"WLei224"}],["meta",{"property":"article:tag","content":"leetcode"}],["meta",{"property":"article:tag","content":"数组双指针"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"026-leetcode\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"WLei224\\",\\"url\\":\\"/aboutguider/\\"}]}"]]},"headers":[],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.44,"words":732},"filePathRelative":"suanfa/026.删除有序数组中的重复项.md","excerpt":"<h1> 删除有序数组中的重复项</h1>\\n<ul>\\n<li>\\n<p><code>leetCode：</code>026.删除有序数组中的重复项</p>\\n</li>\\n<li>\\n<p><code>describution:</code></p>\\n<blockquote>\\n<p>给你一个 升序排列 的数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。元素的 相对顺序 应该保持 一致 。</p>\\n<p>由于在某些语言中不能改变数组的长度，所以必须将结果放在数组nums的第一部分。更规范地说，如果在删除重复项之后有 k 个元素，那么 nums 的前 k 个元素应该保存最终结果。\\n将最终结果插入 nums 的前 k 个位置后返回 k 。\\n不要使用额外的空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。</p>\\n<p>判题标准:\\n系统会用下面的代码来测试你的题解:\\nint[] nums = [...]; // 输入数组\\nint[] expectedNums = [...]; // 长度正确的期望答案\\nint k = removeDuplicates(nums); // 调用\\nassert k == expectedNums.length;\\nfor (int i = 0; i &lt; k; i++) {\\nassert nums[i] == expectedNums[i];\\n}\\n如果所有断言都通过，那么您的题解将被 通过。</p>\\n<p>示例 1：\\n输入：nums = [1,1,2]\\n输出：2, nums = [1,2,_]\\n解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。</p>\\n<p>示例 2：\\n输入：nums = [0,0,1,1,1,2,2,3,3,4]\\n输出：5, nums = [0,1,2,3,4]\\n解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。</p>\\n<p>提示：\\n1 &lt;= nums.length &lt;= 3 * 104\\n-104 &lt;= nums[i] &lt;= 104\\nnums 已按 升序 排列</p>\\n</blockquote>\\n</li>\\n<li>\\n<p><code>技巧：</code>数组双指针</p>\\n</li>\\n<li>\\n<p><code>思路：</code>准备一胖一瘦水桶，沿着数组顺序，遍历数组中每一个元素，从索引0出发，先将索引为0的value装进小水桶。瘦水桶先出发，一次前进一步，若遇到相同的元素，则继续前进，若遇到与前一个元素不同的元素，诶，扭头告诉胖水桶把新元素装进去（小水桶负责侦察，胖水桶负责办事），就这样一直前进。思路是否清晰？</p>\\n</li>\\n<li>\\n<p><code>code：</code></p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Solution</span><span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">int</span> <span class=\\"token function\\">removeDuplicates</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> nums<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">.</span>length <span class=\\"token operator\\">==</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span> <span class=\\"token keyword\\">return</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">int</span> fast <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span>slow <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token keyword\\">while</span><span class=\\"token punctuation\\">(</span>fast <span class=\\"token operator\\">&lt;</span> nums<span class=\\"token punctuation\\">.</span>length<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 判断下一个是否为新元素</span>\\n\\t\\t\\t<span class=\\"token keyword\\">if</span><span class=\\"token punctuation\\">(</span>nums<span class=\\"token punctuation\\">[</span>fast<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">!=</span> nums<span class=\\"token punctuation\\">[</span>slow<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t\\t<span class=\\"token comment\\">// last++; 简化代码，将新元素传入last的下一个位置</span>\\n\\t\\t\\t\\tnums<span class=\\"token punctuation\\">[</span><span class=\\"token operator\\">++</span>slow<span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">=</span> nums<span class=\\"token punctuation\\">[</span>fast<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token punctuation\\">}</span>\\n            <span class=\\"token comment\\">// 不是新元素，大水桶继续前行</span>\\n\\t\\t\\tfast<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token comment\\">// 返回如题要求的K值</span>\\n\\t\\t<span class=\\"token keyword\\">return</span> slow<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p><code>结束语：</code>菜狗幸福而又美好的一天结束啦！</p>\\n</li>\\n</ul>"}');export{n as data};
